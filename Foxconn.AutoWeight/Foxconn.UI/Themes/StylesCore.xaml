<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:System="clr-namespace:System;assembly=mscorlib"
                    xmlns:Controls="clr-namespace:Foxconn.UI.Controls"
                    xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
                    PresentationOptions:Freeze="true"
                    x:Uid="ResourceDictionary_2">

    <!--#region Basic-->
    <!--<System:String x:Key="DefaultUIFont"
                   x:Uid="System:String_1">Segoe UI</System:String>-->
    <!--<System:Double x:Key="{x:Static SystemFonts.IconFontSizeKey}"
                   x:Uid="System:Double_5">10</System:Double>
    <FontWeight x:Key="{x:Static SystemFonts.IconFontWeightKey}"
                x:Uid="FontWeight_4">Normal</FontWeight>
    <System:Double x:Key="{x:Static SystemFonts.MessageFontSizeKey}"
                   x:Uid="System:Double_6">11</System:Double>
    <FontWeight x:Key="{x:Static SystemFonts.MessageFontWeightKey}"
                x:Uid="FontWeight_2">Normal</FontWeight>
    <System:Double x:Key="{x:Static SystemFonts.CaptionFontSizeKey}"
                   x:Uid="System:Double_7">12</System:Double>-->
    <FontWeight x:Key="{x:Static SystemFonts.CaptionFontWeightKey}"
                x:Uid="FontWeight_3">Bold</FontWeight>
    <System:Double x:Key="LargeText"
                   x:Uid="System:Double_10">14</System:Double>
    <System:Double x:Key="DefaultSpacing"
                   x:Uid="System:Double_1">4</System:Double>
    <System:Double x:Key="MediumSpacing"
                   x:Uid="System:Double_2">8</System:Double>
    <System:Double x:Key="LargeSpacing"
                   x:Uid="System:Double_3">12</System:Double>
    <System:Double x:Key="ExtraLargeSpacing"
                   x:Uid="System:Double_4">16</System:Double>
    <System:Double x:Key="-DefaultSpacing"
                   x:Uid="System:Double_11">-4</System:Double>
    <System:Double x:Key="-MediumSpacing"
                   x:Uid="System:Double_12">-8</System:Double>
    <System:Double x:Key="-LargeSpacing"
                   x:Uid="System:Double_13">-12</System:Double>
    <System:Double x:Key="-ExtraLargeSpacing"
                   x:Uid="System:Double_8">-16</System:Double>
    <Thickness x:Key="DefaultLeftMargin"
               x:Uid="Thickness_1"
               Left="{StaticResource DefaultSpacing}"
               Top="0"
               Right="0"
               Bottom="0" />
    <Thickness x:Key="MediumLeftMargin"
               x:Uid="Thickness_7"
               Left="{StaticResource MediumSpacing}"
               Top="0"
               Right="0"
               Bottom="0" />
    <Thickness x:Key="LargeLeftMargin"
               x:Uid="Thickness_11"
               Left="{StaticResource LargeSpacing}"
               Top="0"
               Right="0"
               Bottom="0" />
    <Thickness x:Key="ExtraLargeLeftMargin"
               x:Uid="Thickness_12"
               Left="{StaticResource ExtraLargeSpacing}"
               Top="0"
               Right="0"
               Bottom="0" />
    <Thickness x:Key="DefaultBottomMargin"
               x:Uid="Thickness_8"
               Left="0"
               Top="0"
               Right="0"
               Bottom="{StaticResource DefaultSpacing}" />
    <Thickness x:Key="DefaultLeftTopMargin"
               x:Uid="Thickness_3"
               Left="{StaticResource DefaultSpacing}"
               Top="{StaticResource DefaultSpacing}"
               Right="0"
               Bottom="0" />
    <Thickness x:Key="DefaultTopMargin"
               x:Uid="Thickness_2"
               Left="0"
               Top="{StaticResource DefaultSpacing}"
               Right="0"
               Bottom="0" />
    <Thickness x:Key="MediumTopMargin"
               x:Uid="Thickness_4"
               Left="0"
               Top="{StaticResource MediumSpacing}"
               Right="0"
               Bottom="0" />
    <Thickness x:Key="LargeTopMargin"
               x:Uid="Thickness_9"
               Left="0"
               Top="{StaticResource LargeSpacing}"
               Right="0"
               Bottom="0" />
    <Thickness x:Key="LargeRightMargin"
               x:Uid="Thickness_13"
               Left="0"
               Top="0"
               Right="{StaticResource LargeSpacing}"
               Bottom="0" />
    <Thickness x:Key="DefaultLeftMediumTopMargin"
               x:Uid="Thickness_14"
               Left="{StaticResource DefaultSpacing}"
               Top="{StaticResource MediumSpacing}"
               Right="0"
               Bottom="0" />
    <Thickness x:Key="ExtraLargeTopMargin"
               x:Uid="Thickness_5"
               Left="0"
               Top="{StaticResource ExtraLargeSpacing}"
               Right="0"
               Bottom="0" />
    <Thickness x:Key="ExtraLargeTopMarginWithDefaultLeftMargin"
               x:Uid="Thickness_18"
               Left="{StaticResource DefaultSpacing}"
               Top="{StaticResource ExtraLargeSpacing}"
               Right="0"
               Bottom="0" />
    <Thickness x:Key="ExtraLargeTopMarginWithMediumLeftMargin"
               x:Uid="Thickness_19"
               Left="{StaticResource MediumSpacing}"
               Top="{StaticResource ExtraLargeSpacing}"
               Right="0"
               Bottom="0" />
    <Thickness x:Key="LargeMargin"
               x:Uid="Thickness_6"
               Left="{StaticResource LargeSpacing}"
               Top="{StaticResource LargeSpacing}"
               Right="{StaticResource LargeSpacing}"
               Bottom="{StaticResource LargeSpacing}" />
    <Thickness x:Key="SmallUniformMargin"
               x:Uid="Thickness_10">1,1,1,1</Thickness>
    <Thickness x:Key="DefaultMargin"
               x:Uid="Thickness_15"
               Left="0"
               Top="3"
               Right="3"
               Bottom="0" />
    <Thickness x:Key="PaletteTabGroupMargin"
               x:Uid="Thickness_16"
               Left="0"
               Top="0"
               Right="8"
               Bottom="0" />
    <Thickness x:Key="PaletteViewHeaderTabGroupMargin"
               x:Uid="Thickness_17"
               Left="0"
               Top="0"
               Right="0"
               Bottom="0" />
    <CornerRadius x:Key="PaletteHeaderCornerRounding"
                  x:Uid="CornerRadius_1">0,4,0,0</CornerRadius>
    <System:Double x:Key="PaletteHeaderHeight"
                   x:Uid="System:Double_9">22</System:Double>
    <CornerRadius x:Key="PaletteCornerRounding"
                  x:Uid="CornerRadius_7">0,4,4,4</CornerRadius>
    <CornerRadius x:Key="PaletteCornerRoundingWithHeader"
                  x:Uid="CornerRadius_2">0,0,4,4</CornerRadius>
    <!--#endregion-->

    <!--#region ScrollBar-->
    <SolidColorBrush x:Key="ScrollViewerBackground"
                     Color="#FF333333" />
    <SolidColorBrush x:Key="VerticalScrollBarBackground"
                     Color="#FF3D3D3D" />
    <SolidColorBrush x:Key="HorizontalScrollBarBackground"
                     Color="#FF3D3D3D" />
    <SolidColorBrush x:Key="VerticalScrollBarThumb"
                     Color="#FF808080" />
    <SolidColorBrush x:Key="ScrollBarDisabledBackground"
                     Color="#FF3D3D3D" />
    <SolidColorBrush x:Key="ScrollBarHotThumb"
                     Color="#FFCCCCCC" />
    <SolidColorBrush x:Key="ScrollBarSelectedThumb"
                     Color="#FFE5E5E5" />
    <SolidColorBrush x:Key="CornerBorder"
                     Color="#FF333333" />
    <Geometry x:Key="RepeatButton">M3.5445026,0 L7.0890052,7.0890053 L3.0459049E-09,7.0890053 z</Geometry>
    <Style TargetType="{x:Type ScrollViewer}">
        <Setter Property="Background"
                Value="{DynamicResource ScrollViewerBackground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid x:Name="Grid"
                          Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Rectangle x:Name="Corner"
                                   Grid.Column="1"
                                   Grid.Row="1"
                                   Fill="{TemplateBinding Background}" />
                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                                CanContentScroll="{TemplateBinding CanContentScroll}"
                                                CanHorizontallyScroll="False"
                                                CanVerticallyScroll="False"
                                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                                Content="{TemplateBinding Content}"
                                                Grid.Column="0"
                                                Grid.Row="0"
                                                Margin="{TemplateBinding Padding}" />
                        <ScrollBar x:Name="PART_VerticalScrollBar"
                                   AutomationProperties.AutomationId="VerticalScrollBar"
                                   Cursor="Arrow"
                                   Grid.Column="1"
                                   Grid.Row="0"
                                   Maximum="{TemplateBinding ScrollableHeight}"
                                   Minimum="0"
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                   Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                   ViewportSize="{TemplateBinding ViewportHeight}"
                                   Style="{DynamicResource VerticalScrollBarStyle}" />
                        <ScrollBar x:Name="PART_HorizontalScrollBar"
                                   AutomationProperties.AutomationId="HorizontalScrollBar"
                                   Cursor="Arrow"
                                   Grid.Column="0"
                                   Grid.Row="1"
                                   Maximum="{TemplateBinding ScrollableWidth}"
                                   Minimum="0"
                                   Orientation="Horizontal"
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                   Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                   ViewportSize="{TemplateBinding ViewportWidth}"
                                   Style="{DynamicResource HorisontalScrollBarStyle}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RepeatButtonUpStyle"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="Focusable"
                Value="false" />
        <Setter Property="IsTabStop"
                Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Background="Transparent">
                        <Path x:Name="TrianglePath"
                              Data="{StaticResource RepeatButton}"
                              Fill="{StaticResource VerticalScrollBarThumb}"
                              Height="Auto"
                              Margin="5"
                              Stretch="Fill"
                              Width="Auto" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="Fill"
                                    TargetName="TrianglePath"
                                    Value="{StaticResource ScrollBarHotThumb}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="True">
                            <Setter Property="Fill"
                                    TargetName="TrianglePath"
                                    Value="{StaticResource ScrollBarSelectedThumb}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarThumb"
           TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="IsTabStop"
                Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid>
                        <Rectangle x:Name="VerticalThumb"
                                   Fill="{StaticResource VerticalScrollBarThumb}"
                                   Width="7.4"
                                   RadiusX="4"
                                   RadiusY="4" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="Fill"
                                    TargetName="VerticalThumb"
                                    Value="{StaticResource ScrollBarHotThumb}" />
                        </Trigger>
                        <Trigger Property="IsDragging"
                                 Value="True">
                            <Setter Property="Fill"
                                    TargetName="VerticalThumb"
                                    Value="{StaticResource ScrollBarSelectedThumb}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RepeatButtonDownStyle"
           TargetType="{x:Type RepeatButton}"
           BasedOn="{StaticResource RepeatButtonUpStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Background="Transparent">
                        <Path x:Name="BottomTrianglePath"
                              Data="{StaticResource RepeatButton}"
                              Fill="{StaticResource VerticalScrollBarThumb}"
                              Height="Auto"
                              Margin="5"
                              Stretch="Fill"
                              Width="Auto"
                              RenderTransformOrigin="0.5,0.5">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleY="-1"
                                                    ScaleX="1" />
                                    <SkewTransform AngleY="0"
                                                   AngleX="0" />
                                    <RotateTransform Angle="0" />
                                    <TranslateTransform />
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="Fill"
                                    TargetName="BottomTrianglePath"
                                    Value="{StaticResource ScrollBarHotThumb}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="True">
                            <Setter Property="Fill"
                                    TargetName="BottomTrianglePath"
                                    Value="{StaticResource ScrollBarSelectedThumb}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="VerticalScrollBarPageButton"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Focusable"
                Value="false" />
        <Setter Property="IsTabStop"
                Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}"
                               Height="{TemplateBinding Height}"
                               Width="{TemplateBinding Width}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="HorizontalScrollBarPageButton"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Focusable"
                Value="false" />
        <Setter Property="IsTabStop"
                Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}"
                               Height="{TemplateBinding Height}"
                               Width="{TemplateBinding Width}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="VerticalScrollBarStyle"
           TargetType="{x:Type ScrollBar}">
        <Setter Property="Background"
                Value="{StaticResource VerticalScrollBarBackground}" />
        <Setter Property="Stylus.IsPressAndHoldEnabled"
                Value="false" />
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="false" />
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Width"
                Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
        <Setter Property="MinWidth"
                Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg"
                          Background="{TemplateBinding Background}"
                          SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
                            <RowDefinition Height="0.00001*" />
                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
                        </Grid.RowDefinitions>
                        <RepeatButton Command="{x:Static ScrollBar.LineUpCommand}"
                                      IsEnabled="{TemplateBinding IsMouseOver}"
                                      Style="{StaticResource RepeatButtonUpStyle}" />
                        <Track x:Name="PART_Track"
                               IsDirectionReversed="true"
                               IsEnabled="{TemplateBinding IsMouseOver}"
                               Grid.Row="1">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}"
                                              Style="{StaticResource VerticalScrollBarPageButton}" />
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}"
                                              Style="{StaticResource VerticalScrollBarPageButton}" />
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource ScrollBarThumb}" />
                            </Track.Thumb>
                        </Track>
                        <RepeatButton Command="{x:Static ScrollBar.LineDownCommand}"
                                      IsEnabled="{TemplateBinding IsMouseOver}"
                                      Grid.Row="2"
                                      Style="{DynamicResource RepeatButtonDownStyle}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Background"
                                    TargetName="Bg"
                                    Value="{StaticResource ScrollBarDisabledBackground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation"
                     Value="Horizontal">
                <Setter Property="Width"
                        Value="Auto" />
                <Setter Property="MinWidth"
                        Value="0" />
                <Setter Property="Height"
                        Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />
                <Setter Property="MinHeight"
                        Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />
                <Setter Property="Background"
                        Value="{StaticResource HorizontalScrollBarBackground}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="Bg"
                                  Background="{TemplateBinding Background}"
                                  SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
                                    <ColumnDefinition Width="0.00001*" />
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
                                </Grid.ColumnDefinitions>
                                <RepeatButton Command="{x:Static ScrollBar.LineLeftCommand}"
                                              IsEnabled="{TemplateBinding IsMouseOver}"
                                              Style="{StaticResource RepeatButtonUpStyle}" />
                                <Track x:Name="PART_Track"
                                       Grid.Column="1"
                                       IsEnabled="{TemplateBinding IsMouseOver}">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}"
                                                      Style="{StaticResource HorizontalScrollBarPageButton}" />
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}"
                                                      Style="{StaticResource HorizontalScrollBarPageButton}" />
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{StaticResource ScrollBarThumb}" />
                                    </Track.Thumb>
                                </Track>
                                <RepeatButton Grid.Column="2"
                                              Command="{x:Static ScrollBar.LineRightCommand}"
                                              IsEnabled="{TemplateBinding IsMouseOver}"
                                              Style="{StaticResource RepeatButtonUpStyle}" />
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled"
                                         Value="false">
                                    <Setter Property="Background"
                                            TargetName="Bg"
                                            Value="{StaticResource ScrollBarDisabledBackground}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="HorisontalScrollBarStyle"
           TargetType="{x:Type ScrollBar}">
        <Setter Property="Background"
                Value="{StaticResource VerticalScrollBarBackground}" />
        <Setter Property="Stylus.IsPressAndHoldEnabled"
                Value="false" />
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="false" />
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Width"
                Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
        <Setter Property="MinWidth"
                Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
        <Style.Triggers>
            <Trigger Property="Orientation"
                     Value="Horizontal">
                <Setter Property="Width"
                        Value="Auto" />
                <Setter Property="MinWidth"
                        Value="0" />
                <Setter Property="Height"
                        Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />
                <Setter Property="MinHeight"
                        Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />
                <Setter Property="Background"
                        Value="{StaticResource HorizontalScrollBarBackground}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="Bg"
                                  Background="{TemplateBinding Background}"
                                  SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
                                    <ColumnDefinition Width="0.00001*" />
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
                                </Grid.ColumnDefinitions>
                                <RepeatButton Command="{x:Static ScrollBar.LineLeftCommand}"
                                              IsEnabled="{TemplateBinding IsMouseOver}"
                                              Style="{DynamicResource RepeatLeftButtonStyle}" />
                                <Track x:Name="PART_Track"
                                       Grid.Column="1"
                                       IsEnabled="{TemplateBinding IsMouseOver}">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}"
                                                      Style="{StaticResource HorizontalScrollBarPageButton}" />
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}"
                                                      Style="{StaticResource HorizontalScrollBarPageButton}" />
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{DynamicResource HorisontalThumbStyle}" />
                                    </Track.Thumb>
                                </Track>
                                <RepeatButton Grid.Column="2"
                                              Command="{x:Static ScrollBar.LineRightCommand}"
                                              IsEnabled="{TemplateBinding IsMouseOver}"
                                              Style="{DynamicResource RepeatRightButtonStyle}" />
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled"
                                         Value="false">
                                    <Setter Property="Background"
                                            TargetName="Bg"
                                            Value="{StaticResource ScrollBarDisabledBackground}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="HorisontalThumbStyle"
           TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="IsTabStop"
                Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid>
                        <Rectangle x:Name="VerticalThumb"
                                   Fill="{StaticResource VerticalScrollBarThumb}"
                                   Height="7.4"
                                   RadiusX="4"
                                   RadiusY="4" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="Fill"
                                    TargetName="VerticalThumb"
                                    Value="{StaticResource ScrollBarHotThumb}" />
                        </Trigger>
                        <Trigger Property="IsDragging"
                                 Value="True">
                            <Setter Property="Fill"
                                    TargetName="VerticalThumb"
                                    Value="{StaticResource ScrollBarSelectedThumb}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RepeatLeftButtonStyle"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="Focusable"
                Value="false" />
        <Setter Property="IsTabStop"
                Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Background="Transparent"
                          RenderTransformOrigin="0.5,0.5">
                        <Grid.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform />
                                <SkewTransform />
                                <RotateTransform Angle="270" />
                                <TranslateTransform />
                            </TransformGroup>
                        </Grid.RenderTransform>
                        <Path x:Name="TrianglePath"
                              Data="{StaticResource RepeatButton}"
                              Fill="{StaticResource VerticalScrollBarThumb}"
                              Height="Auto"
                              Margin="5"
                              Stretch="Fill"
                              Width="Auto" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="Fill"
                                    TargetName="TrianglePath"
                                    Value="{StaticResource ScrollBarHotThumb}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="True">
                            <Setter Property="Fill"
                                    TargetName="TrianglePath"
                                    Value="{StaticResource ScrollBarSelectedThumb}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RepeatRightButtonStyle"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="Focusable"
                Value="false" />
        <Setter Property="IsTabStop"
                Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Background="Transparent"
                          RenderTransformOrigin="0.5,0.5">
                        <Grid.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform />
                                <SkewTransform />
                                <RotateTransform Angle="270" />
                                <TranslateTransform />
                            </TransformGroup>
                        </Grid.RenderTransform>
                        <Path x:Name="TrianglePath"
                              Data="{StaticResource RepeatButton}"
                              Fill="{StaticResource VerticalScrollBarThumb}"
                              Height="Auto"
                              Margin="5"
                              Stretch="Fill"
                              Width="Auto"
                              RenderTransformOrigin="0.5,0.5">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform />
                                    <SkewTransform />
                                    <RotateTransform Angle="180" />
                                    <TranslateTransform />
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="Fill"
                                    TargetName="TrianglePath"
                                    Value="{StaticResource ScrollBarHotThumb}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="True">
                            <Setter Property="Fill"
                                    TargetName="TrianglePath"
                                    Value="{StaticResource ScrollBarSelectedThumb}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region ScrollView-->
    <!--<CornerRadius x:Key="ScrollViewerCornerRadius">0,0,4,0</CornerRadius>
    <Style x:Key="ExpressionScrollViewer"
           TargetType="{x:Type ScrollViewer}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Name="Grid">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Border Name="ScrollViewerCorner"
                                Background="{DynamicResource ScrollbarBackgroundBrush}"
                                CornerRadius="{DynamicResource ScrollViewerCornerRadius}"
                                BorderBrush="{DynamicResource ScrollViewerCornerBorderBrush}"
                                BorderThickness="1,1,0,0"
                                Grid.Column="1"
                                Grid.Row="1" />
                        <Border Background="{TemplateBinding Control.Background}">
                            <ScrollContentPresenter Name="PART_ScrollContentPresenter"
                                                    Margin="{TemplateBinding Control.Padding}"
                                                    Grid.Column="0"
                                                    Grid.Row="0"
                                                    Content="{TemplateBinding ContentControl.Content}"
                                                    ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                                    CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}"
                                                    CanHorizontallyScroll="false"
                                                    CanVerticallyScroll="false" />
                        </Border>
                        <ScrollBar Name="PART_VerticalScrollBar"
                                   Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}"
                                   Cursor="Arrow"
                                   Grid.Column="1"
                                   Grid.Row="0"
                                   ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                                   Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}"
                                   Minimum="0">
                            <RangeBase.Value>
                                <Binding Path="VerticalOffset"
                                         Mode="OneWay"
                                         RelativeSource="{RelativeSource TemplatedParent}" />
                            </RangeBase.Value>
                        </ScrollBar>
                        <ScrollBar Name="PART_HorizontalScrollBar"
                                   Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}"
                                   Cursor="Arrow"
                                   Grid.Column="0"
                                   Grid.Row="1"
                                   Orientation="Horizontal"
                                   ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                                   Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}"
                                   Minimum="0">
                            <RangeBase.Value>
                                <Binding Path="HorizontalOffset"
                                         Mode="OneWay"
                                         RelativeSource="{RelativeSource TemplatedParent}" />
                            </RangeBase.Value>
                        </ScrollBar>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="PART_VerticalScrollBar"
                                 Property="UIElement.Visibility"
                                 Value="Collapsed">
                            <Setter TargetName="ScrollViewerCorner"
                                    Property="UIElement.Visibility"
                                    Value="Collapsed" />
                        </Trigger>
                        <Trigger SourceName="PART_HorizontalScrollBar"
                                 Property="UIElement.Visibility"
                                 Value="Collapsed">
                            <Setter TargetName="ScrollViewerCorner"
                                    Property="UIElement.Visibility"
                                    Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="UIElement.IsEnabled"
                     Value="false">
                <Setter Property="Control.Foreground"
                        Value="{DynamicResource DialogDisabledTextBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Static GridView.GridViewScrollViewerStyleKey}"
           TargetType="{x:Type ScrollViewer}"
           BasedOn="{StaticResource ExpressionScrollViewer}">
        <Setter Property="UIElement.Focusable"
                Value="false" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Background="{TemplateBinding Control.Background}"
                          SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Border Name="ScrollViewerCorner"
                                Background="{DynamicResource ScrollbarBackgroundBrush}"
                                CornerRadius="{DynamicResource ScrollViewerCornerRadius}"
                                BorderBrush="{DynamicResource ScrollViewerCornerBorderBrush}"
                                BorderThickness="1,1,0,0"
                                Grid.Column="1"
                                Grid.Row="1" />
                        <DockPanel Margin="{TemplateBinding Control.Padding}">
                            <ScrollViewer DockPanel.Dock="Top"
                                          HorizontalScrollBarVisibility="Hidden"
                                          VerticalScrollBarVisibility="Hidden"
                                          Focusable="false">
                                <GridViewHeaderRowPresenter Margin="2,0,2,0"
                                                            SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
                                    <GridViewHeaderRowPresenter.ColumnHeaderContainerStyle>
                                        <Binding Path="TemplatedParent.View.ColumnHeaderContainerStyle"
                                                 RelativeSource="{RelativeSource TemplatedParent}" />
                                    </GridViewHeaderRowPresenter.ColumnHeaderContainerStyle>
                                    <GridViewHeaderRowPresenter.ColumnHeaderTemplate>
                                        <Binding Path="TemplatedParent.View.ColumnHeaderTemplate"
                                                 RelativeSource="{RelativeSource TemplatedParent}" />
                                    </GridViewHeaderRowPresenter.ColumnHeaderTemplate>
                                    <GridViewHeaderRowPresenter.ColumnHeaderTemplateSelector>
                                        <Binding Path="TemplatedParent.View.ColumnHeaderTemplateSelector"
                                                 RelativeSource="{RelativeSource TemplatedParent}" />
                                    </GridViewHeaderRowPresenter.ColumnHeaderTemplateSelector>
                                    <GridViewHeaderRowPresenter.AllowsColumnReorder>
                                        <Binding Path="TemplatedParent.View.AllowsColumnReorder"
                                                 RelativeSource="{RelativeSource TemplatedParent}" />
                                    </GridViewHeaderRowPresenter.AllowsColumnReorder>
                                    <GridViewHeaderRowPresenter.ColumnHeaderContextMenu>
                                        <Binding Path="TemplatedParent.View.ColumnHeaderContextMenu"
                                                 RelativeSource="{RelativeSource TemplatedParent}" />
                                    </GridViewHeaderRowPresenter.ColumnHeaderContextMenu>
                                    <GridViewHeaderRowPresenter.ColumnHeaderToolTip>
                                        <Binding Path="TemplatedParent.View.ColumnHeaderToolTip"
                                                 RelativeSource="{RelativeSource TemplatedParent}" />
                                    </GridViewHeaderRowPresenter.ColumnHeaderToolTip>
                                    <GridViewRowPresenterBase.Columns>
                                        <Binding Path="TemplatedParent.View.Columns"
                                                 RelativeSource="{RelativeSource TemplatedParent}" />
                                    </GridViewRowPresenterBase.Columns>
                                </GridViewHeaderRowPresenter>
                            </ScrollViewer>
                            <ScrollContentPresenter Name="PART_ScrollContentPresenter"
                                                    KeyboardNavigation.DirectionalNavigation="Local"
                                                    Content="{TemplateBinding ContentControl.Content}"
                                                    ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                                    CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}"
                                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                        </DockPanel>
                        <ScrollBar Name="PART_HorizontalScrollBar"
                                   Orientation="Horizontal"
                                   Grid.Row="1"
                                   Minimum="0.0"
                                   Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}"
                                   ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                                   Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}"
                                   Cursor="Arrow">
                            <RangeBase.Value>
                                <Binding Path="HorizontalOffset"
                                         RelativeSource="{RelativeSource TemplatedParent}"
                                         Mode="OneWay" />
                            </RangeBase.Value>
                        </ScrollBar>
                        <ScrollBar Name="PART_VerticalScrollBar"
                                   Orientation="Vertical"
                                   Grid.Column="1"
                                   Minimum="0.0"
                                   Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}"
                                   ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                                   Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}"
                                   Cursor="Arrow">
                            <RangeBase.Value>
                                <Binding Path="VerticalOffset"
                                         RelativeSource="{RelativeSource TemplatedParent}"
                                         Mode="OneWay" />
                            </RangeBase.Value>
                        </ScrollBar>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ScrollViewer}"
           BasedOn="{StaticResource ExpressionScrollViewer}" />
    <Style x:Key="RoundedScrollViewer"
           TargetType="{x:Type ScrollViewer}">
        <Setter Property="Control.BorderThickness"
                Value="1" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Border Background="{TemplateBinding Control.Background}"
                            CornerRadius="4"
                            BorderBrush="{TemplateBinding Control.Background}"
                            BorderThickness="{TemplateBinding Control.BorderThickness}">
                        <Grid Name="Grid">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Border Name="ScrollViewerCorner"
                                    Background="{DynamicResource ScrollbarBackgroundBrush}"
                                    CornerRadius="{DynamicResource ScrollViewerCornerRadius}"
                                    BorderBrush="{DynamicResource ScrollViewerCornerBorderBrush}"
                                    BorderThickness="1,1,0,0"
                                    Grid.Column="1"
                                    Grid.Row="1" />
                            <ScrollContentPresenter Name="ScrollContentPresenter"
                                                    Grid.Column="0"
                                                    Grid.Row="0"
                                                    Margin="{TemplateBinding Control.Padding}"
                                                    Content="{TemplateBinding ContentControl.Content}"
                                                    ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                                    CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" />
                            <ScrollBar Name="PART_HorizontalScrollBar"
                                       Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}"
                                       Grid.Column="0"
                                       Grid.Row="1"
                                       Orientation="Horizontal"
                                       ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                                       Minimum="0"
                                       Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}">
                                <RangeBase.Value>
                                    <Binding Path="HorizontalOffset"
                                             Mode="OneWay"
                                             RelativeSource="{RelativeSource TemplatedParent}" />
                                </RangeBase.Value>
                            </ScrollBar>
                            <ScrollBar Name="PART_VerticalScrollBar"
                                       Margin="1,0,0,0"
                                       Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}"
                                       Grid.Column="1"
                                       Grid.Row="0"
                                       Orientation="Vertical"
                                       ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                                       Minimum="0"
                                       Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}">
                                <RangeBase.Value>
                                    <Binding Path="VerticalOffset"
                                             Mode="OneWay"
                                             RelativeSource="{RelativeSource TemplatedParent}" />
                                </RangeBase.Value>
                            </ScrollBar>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="PART_VerticalScrollBar"
                                 Property="UIElement.Visibility"
                                 Value="Collapsed">
                            <Setter TargetName="ScrollViewerCorner"
                                    Property="UIElement.Visibility"
                                    Value="Collapsed" />
                        </Trigger>
                        <Trigger SourceName="PART_HorizontalScrollBar"
                                 Property="UIElement.Visibility"
                                 Value="Collapsed">
                            <Setter TargetName="ScrollViewerCorner"
                                    Property="UIElement.Visibility"
                                    Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->
    <!--#endregion-->

    <!--#region Button-->
    <Style TargetType="{x:Type ButtonBase}">
        <Setter Property="Control.Background"
                Value="{DynamicResource ButtonDefaultBackgroundBrush}" />
        <Setter Property="Control.BorderBrush"
                Value="{DynamicResource ButtonDefaultBorderBrush}" />
        <Setter Property="Control.Foreground"
                Value="{DynamicResource ButtonDefaultTextBrush}" />
        <Setter Property="Control.BorderThickness"
                Value="1" />
        <Setter Property="FrameworkElement.HorizontalAlignment"
                Value="Center" />
        <Setter Property="FrameworkElement.MinWidth"
                Value="50" />
        <Setter Property="FrameworkElement.MinHeight"
                Value="18" />
        <Setter Property="Control.FontFamily"
                Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="Control.FontSize"
                Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="Control.FontWeight"
                Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Control.Padding"
                Value="1" />
        <Setter Property="FrameworkElement.FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle SnapsToDevicePixels="true"
                                           Stroke="{DynamicResource ControlFocusBorderBrush}"
                                           StrokeThickness="1"
                                           RadiusX="3"
                                           RadiusY="3" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsFocused"
                                 Value="true">
                            <Setter Value="{DynamicResource ButtonDefaultBackgroundBrush}"
                                    Property="Control.Background" />
                            <Setter Value="{DynamicResource ButtonDefaultTextBrush}"
                                    Property="Control.Foreground" />
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver"
                                 Value="true">
                            <Setter Value="{DynamicResource ButtonMouseOverBackgroundBrush}"
                                    Property="Control.Background" />
                            <Setter Value="{DynamicResource ButtonMouseOverBorderBrush}"
                                    Property="Control.BorderBrush" />
                            <Setter Value="{DynamicResource ButtonMouseOverTextBrush}"
                                    Property="Control.Foreground" />
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed"
                                 Value="true">
                            <Setter Value="{DynamicResource ButtonPressedBackgroundBrush}"
                                    Property="Control.Background" />
                            <Setter Value="{DynamicResource ButtonPressedBorderBrush}"
                                    Property="Control.BorderBrush" />
                            <Setter Value="{DynamicResource ButtonDefaultTextBrush}"
                                    Property="Control.Foreground" />
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled"
                                 Value="false">
                            <Setter Value="{DynamicResource ButtonDisabledBackgroundBrush}"
                                    Property="Control.Background" />
                            <Setter Value="{DynamicResource ButtonDisabledBorderBrush}"
                                    Property="Control.BorderBrush" />
                            <Setter Value="{DynamicResource ButtonDisabledTextBrush}"
                                    Property="Control.Foreground" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="ButtonTemplateGrid"
                            Background="{TemplateBinding Control.Background}"
                            CornerRadius="3"
                            BorderThickness="{TemplateBinding Control.BorderThickness}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}">
                        <ContentPresenter Name="Content"
                                          Content="{TemplateBinding ContentControl.Content}"
                                          ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Margin="{TemplateBinding Control.Padding}"
                                          RecognizesAccessKey="true" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Button}"
           BasedOn="{StaticResource {x:Type ButtonBase}}">
        <Setter Property="Control.Padding"
                Value="1,1,1,2" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted"
                                 Value="true">
                            <Setter Value="{DynamicResource ButtonDefaultBackgroundBrush}"
                                    Property="Control.Background" />
                            <Setter Value="{DynamicResource ButtonIsDefaultBorderBrush}"
                                    Property="Control.BorderBrush" />
                            <Setter Property="Control.BorderThickness"
                                    Value="2,2,2,2" />
                            <Setter Value="{DynamicResource ButtonDefaultTextBrush}"
                                    Property="Control.Foreground" />
                        </Trigger>
                        <Trigger Property="UIElement.IsFocused"
                                 Value="true">
                            <Setter Value="{DynamicResource ButtonDefaultBackgroundBrush}"
                                    Property="Control.Background" />
                            <Setter Value="{DynamicResource ButtonDefaultTextBrush}"
                                    Property="Control.Foreground" />
                            <Setter Value="{DynamicResource ButtonIsFocusedBorderBrush}"
                                    Property="Control.BorderBrush" />
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver"
                                 Value="true">
                            <Setter Value="{DynamicResource ButtonMouseOverBackgroundBrush}"
                                    Property="Control.Background" />
                            <Setter Value="{DynamicResource ButtonMouseOverBorderBrush}"
                                    Property="Control.BorderBrush" />
                            <Setter Value="{DynamicResource ButtonMouseOverTextBrush}"
                                    Property="Control.Foreground" />
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed"
                                 Value="true">
                            <Setter Value="{DynamicResource ButtonPressedBackgroundBrush}"
                                    Property="Control.Background" />
                            <Setter Value="{DynamicResource ButtonPressedBorderBrush}"
                                    Property="Control.BorderBrush" />
                            <Setter Value="{DynamicResource ButtonDefaultTextBrush}"
                                    Property="Control.Foreground" />
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled"
                                 Value="false">
                            <Setter Value="{DynamicResource ButtonDisabledBackgroundBrush}"
                                    Property="Control.Background" />
                            <Setter Value="{DynamicResource ButtonDisabledBorderBrush}"
                                    Property="Control.BorderBrush" />
                            <Setter Value="{DynamicResource ButtonDisabledTextBrush}"
                                    Property="Control.Foreground" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="ButtonTemplateGrid"
                            Background="{TemplateBinding Control.Background}"
                            CornerRadius="3"
                            BorderThickness="{TemplateBinding Control.BorderThickness}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}">
                        <ContentPresenter Name="Content"
                                          Content="{TemplateBinding ContentControl.Content}"
                                          ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Margin="{TemplateBinding Control.Padding}"
                                          RecognizesAccessKey="true" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DialogButton"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="FrameworkElement.HorizontalAlignment"
                Value="Stretch" />
        <Setter Property="FrameworkElement.MinWidth"
                Value="75" />
        <Setter Property="FrameworkElement.MinHeight"
                Value="20" />
    </Style>
    <!--#endregion-->

    <!--#region CheckBox-->
    <Style x:Key="CheckBoxBase"
           TargetType="{x:Type CheckBox}">
        <Setter Property="FrameworkElement.VerticalAlignment"
                Value="Center" />
        <Setter Property="Control.Foreground"
                Value="{DynamicResource Text1Brush}" />
        <Setter Property="Control.Background"
                Value="{DynamicResource CheckMarkToggleButtonBackgroundBrush}" />
        <Setter Property="Control.BorderBrush"
                Value="{DynamicResource CheckMarkToggleButtonDefaultBorderBrush}" />
        <Setter Property="Control.FontFamily"
                Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="Control.FontSize"
                Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="Control.FontWeight"
                Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Control.Padding"
                Value="4,0,0,0" />
        <Setter Property="Control.VerticalContentAlignment"
                Value="Center" />
        <Setter Property="FrameworkElement.FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle SnapsToDevicePixels="true"
                                           Stroke="{DynamicResource ControlFocusBorderBrush}"
                                           StrokeThickness="1"
                                           Width="12"
                                           Height="12"
                                           HorizontalAlignment="Left"
                                           VerticalAlignment="Center" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid Background="Transparent"
                          SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border Width="12"
                                Height="12"
                                VerticalAlignment="Center"
                                Background="{TemplateBinding Control.Background}"
                                BorderBrush="{TemplateBinding Control.BorderBrush}"
                                BorderThickness="1">
                            <Grid>
                                <Path Name="CheckMark"
                                      Fill="{TemplateBinding Control.Foreground}"
                                      Stretch="Fill"
                                      Margin="0,0,0,0"
                                      Data="M 1,5.3616667 L 4,9.3613333 9,1.3616672 C 9,1.3616672 7.0772775,0.36137562 6.5386388,1.3613338 6,2.3612921 4,6.3612346 4,6.3612346 L 2,4.3613912 Z"
                                      Visibility="Collapsed"
                                      Width="8"
                                      Height="8" />
                                <Rectangle Name="NinchedRectangle"
                                           Visibility="Collapsed"
                                           Width="8"
                                           Height="8"
                                           Stretch="Fill"
                                           Margin="2,2,2,2"
                                           Fill="{TemplateBinding Control.Foreground}" />
                            </Grid>
                        </Border>
                        <ContentPresenter Grid.Column="1"
                                          Margin="{TemplateBinding Control.Padding}"
                                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                          HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                          RecognizesAccessKey="true"
                                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver"
                                 Value="true">
                            <Setter Value="{DynamicResource CheckMarkToggleButtonMouseOverBorderBrush}"
                                    Property="Control.BorderBrush" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked"
                                 Value="True">
                            <Setter TargetName="CheckMark"
                                    Property="UIElement.Visibility"
                                    Value="Visible" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked">
                            <Trigger.Value>
                                <x:NullExtension />
                            </Trigger.Value>
                            <Setter TargetName="NinchedRectangle"
                                    Property="UIElement.Visibility"
                                    Value="Visible" />
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled"
                                 Value="false">
                            <Setter Value="{DynamicResource CheckMarkToggleButtonDisabledBorderBrush}"
                                    Property="Control.BorderBrush" />
                            <Setter Value="{DynamicResource DialogDisabledTextBrush}"
                                    Property="Control.Foreground" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type CheckBox}"
           BasedOn="{StaticResource CheckBoxBase}" />
    <Style x:Key="ExpandedCheckBox"
           TargetType="{x:Type CheckBox}">
        <Style.BasedOn>
            <x:NullExtension />
        </Style.BasedOn>
        <Style.Triggers>
            <Trigger Property="ToggleButton.IsChecked"
                     Value="true">
                <Setter Property="FrameworkElement.ToolTip"
                        Value="Collapse" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Control.Padding"
                Value="0" />
        <Setter Property="FrameworkElement.ToolTip"
                Value="Expand" />
        <Setter Property="FrameworkElement.Width"
                Value="14" />
        <Setter Property="FrameworkElement.Height"
                Value="14" />
        <Setter Property="FrameworkElement.MinWidth"
                Value="0" />
        <Setter Property="FrameworkElement.MinHeight"
                Value="0" />
        <Setter Property="UIElement.Focusable"
                Value="false" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid Name="Grid1">
                        <Rectangle Name="Rectangle3"
                                   Grid.Column="0"
                                   Grid.ColumnSpan="1"
                                   Grid.Row="0"
                                   Grid.RowSpan="1"
                                   Fill="Transparent"
                                   StrokeThickness="0.5"
                                   Stroke="Transparent" />
                        <Rectangle Name="Icon"
                                   Width="6"
                                   Height="6"
                                   StrokeThickness="1"
                                   Stroke="{DynamicResource WhiteBrush}"
                                   Fill="Transparent"
                                   Opacity="0.5" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver"
                                 Value="true">
                            <Setter TargetName="Rectangle3"
                                    Value="{DynamicResource ButtonOverBrush}"
                                    Property="Shape.Fill" />
                            <Setter TargetName="Rectangle3"
                                    Value="{DynamicResource PaneHighlightBrush}"
                                    Property="Shape.Stroke" />
                            <Setter TargetName="Icon"
                                    Property="UIElement.Opacity"
                                    Value="1" />
                            <Setter TargetName="Icon"
                                    Value="{DynamicResource PaneHighlightBrush}"
                                    Property="Shape.Stroke" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked"
                                 Value="true">
                            <Setter TargetName="Icon"
                                    Property="FrameworkElement.Height"
                                    Value="2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region ComboBox-->
    <Style x:Key="ExpressionComboBoxButton"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="FrameworkElement.MinWidth"
                Value="0" />
        <Setter Property="FrameworkElement.MinHeight"
                Value="0" />
        <Setter Property="FrameworkElement.Width"
                Value="Auto" />
        <Setter Property="FrameworkElement.Height"
                Value="Auto" />
        <Setter Property="Control.Background"
                Value="Transparent" />
        <Setter Property="UIElement.Focusable"
                Value="false" />
        <Setter Property="Control.BorderBrush"
                Value="{DynamicResource ComboBoxButtonBorderBrush}" />
        <Setter Property="ButtonBase.ClickMode"
                Value="Press" />
        <Setter Property="Control.BorderThickness"
                Value="1" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="{TemplateBinding Control.Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto"
                                              SharedSizeGroup="ComboBoxButton" />
                        </Grid.ColumnDefinitions>
                        <Border Name="ComboBoxButtonBorder"
                                Grid.Column="1"
                                Width="16"
                                CornerRadius="2"
                                Background="{TemplateBinding Control.Background}"
                                BorderThickness="{TemplateBinding Control.BorderThickness}"
                                BorderBrush="{TemplateBinding Control.BorderBrush}">
                            <Image Name="ComboBoxButtonArrow"
                                   Stretch="Fill"
                                   Width="8"
                                   Height="5"
                                   Source="{DynamicResource ExpressionComboBoxButtonIcon}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsFocused"
                                 Value="true">
                            <Setter TargetName="ComboBoxButtonBorder"
                                    Value="{DynamicResource Text1Brush}"
                                    Property="Border.BorderBrush" />
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver"
                                 Value="true">
                            <Setter TargetName="ComboBoxButtonBorder"
                                    Value="{DynamicResource ButtonOverBrush}"
                                    Property="Border.Background" />
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed"
                                 Value="true">
                            <Setter TargetName="ComboBoxButtonBorder"
                                    Value="{DynamicResource DarkBrush}"
                                    Property="Border.BorderBrush" />
                            <Setter TargetName="ComboBoxButtonBorder"
                                    Value="{DynamicResource RecessedBrush}"
                                    Property="Border.Background" />
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled"
                                 Value="false">
                            <Setter TargetName="ComboBoxButtonArrow"
                                    Property="UIElement.Visibility"
                                    Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ComboBoxItemBase"
           TargetType="{x:Type ComboBoxItem}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="UIElement.IsMouseOver"
                               Value="true" />
                    <Condition Property="ListBoxItem.IsSelected"
                               Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="Control.Background"
                        Value="{DynamicResource ListHoverBrush}" />
            </MultiTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Value="True">
                        <Condition.Binding>
                            <Binding Path="IsSelected"
                                     RelativeSource="{RelativeSource Self}" />
                        </Condition.Binding>
                    </Condition>
                    <Condition Value="True">
                        <Condition.Binding>
                            <Binding Path="IsEditable"
                                     RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ComboBox}}" />
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter Property="Control.Background"
                        Value="{DynamicResource ListSelectedBrush}" />
                <Setter Property="Control.Foreground"
                        Value="{DynamicResource ListSelectedTextBrush}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Value="True">
                        <Condition.Binding>
                            <Binding Path="IsFocused"
                                     RelativeSource="{RelativeSource Self}" />
                        </Condition.Binding>
                    </Condition>
                    <Condition Value="False">
                        <Condition.Binding>
                            <Binding Path="IsEditable"
                                     RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ComboBox}}" />
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter Property="Control.Background"
                        Value="{DynamicResource ListSelectedBrush}" />
                <Setter Property="Control.Foreground"
                        Value="{DynamicResource ListSelectedTextBrush}" />
            </MultiDataTrigger>
            <Trigger Property="UIElement.IsEnabled"
                     Value="false">
                <Setter Property="Control.Background"
                        Value="{DynamicResource ListBackgroundBrush}" />
                <Setter Property="Control.Foreground"
                        Value="{DynamicResource DisabledTextBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="FrameworkElement.MinHeight"
                Value="20" />
        <Setter Property="FrameworkElement.FocusVisualStyle">
            <Setter.Value>
                <x:NullExtension />
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Foreground"
                Value="{DynamicResource Text1Brush}" />
        <Setter Property="Control.FontFamily"
                Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="Control.FontSize"
                Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="Control.FontWeight"
                Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Control.Padding"
                Value="4,2,4,2" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border Name="ListBoxItemRoot"
                            BorderThickness="{TemplateBinding Control.BorderThickness}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}"
                            Background="{TemplateBinding Control.Background}">
                        <ContentPresenter Content="{TemplateBinding ContentControl.Content}"
                                          ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"
                                          HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                          Margin="{TemplateBinding Control.Padding}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ComboBoxItem}"
           BasedOn="{StaticResource ComboBoxItemBase}" />
    <Style TargetType="{x:Type ComboBox}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsEnabled"
                     Value="false">
                <Setter Property="UIElement.Opacity"
                        Value="0.5" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="UIElement.IsKeyboardFocusWithin"
                               Value="true" />
                    <Condition Property="ComboBox.IsDropDownOpen"
                               Value="false" />
                    <Condition Property="ComboBox.IsEditable"
                               Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="Control.Foreground"
                        Value="{DynamicResource Text1Brush}" />
            </MultiTrigger>
            <Trigger Property="ComboBox.IsEditable"
                     Value="true">
                <Setter Property="Control.IsTabStop"
                        Value="false" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
                Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
                Value="Auto" />
        <Setter Property="Control.Padding"
                Value="1" />
        <Setter Property="FrameworkElement.MinWidth"
                Value="40" />
        <Setter Property="FrameworkElement.MinHeight"
                Value="20" />
        <Setter Property="Control.FontFamily"
                Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="Control.FontSize"
                Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="Control.FontWeight"
                Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Control.BorderBrush"
                Value="{DynamicResource ComboBoxBorderBrush}" />
        <Setter Property="Control.Background"
                Value="{DynamicResource ComboBoxBackgroundBrush}" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <Border Background="{TemplateBinding Control.BorderBrush}"
                                Padding="{TemplateBinding Control.Padding}"
                                CornerRadius="4">
                            <Grid IsSharedSizeScope="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="1" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto"
                                                      SharedSizeGroup="ComboBoxButton" />
                                </Grid.ColumnDefinitions>
                                <Border Name="SelectedItemBorder"
                                        Grid.ColumnSpan="2"
                                        Margin="1"
                                        CornerRadius="2"
                                        Background="{TemplateBinding Control.Background}" />
                                <ContentPresenter Name="ContentSite"
                                                  Grid.Column="1"
                                                  Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                                                  ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                                                  ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}"
                                                  Margin="4,2,1,2"
                                                  VerticalAlignment="Center"
                                                  TextElement.Foreground="{DynamicResource Text1Brush}" />
                                <TextBox Name="PART_EditableTextBox"
                                         MinHeight="0"
                                         Height="Auto"
                                         Grid.Column="1"
                                         Visibility="Collapsed"
                                         Padding="0"
                                         Margin="1,0,0,0">
                                    <TextBoxBase.IsReadOnly>
                                        <Binding Path="IsReadOnly"
                                                 RelativeSource="{RelativeSource TemplatedParent}" />
                                    </TextBoxBase.IsReadOnly>
                                </TextBox>
                                <ToggleButton Name="DropDownButton"
                                              Focusable="false"
                                              Margin="0"
                                              Grid.Column="0"
                                              Grid.ColumnSpan="3"
                                              Style="{StaticResource ExpressionComboBoxButton}">
                                    <ToggleButton.IsChecked>
                                        <Binding Path="IsDropDownOpen"
                                                 Mode="TwoWay"
                                                 RelativeSource="{RelativeSource TemplatedParent}" />
                                    </ToggleButton.IsChecked>
                                </ToggleButton>
                            </Grid>
                        </Border>
                        <Popup Name="PART_Popup"
                               Placement="Bottom"
                               Focusable="false"
                               PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                            <Popup.IsOpen>
                                <Binding Path="IsDropDownOpen"
                                         RelativeSource="{RelativeSource TemplatedParent}" />
                            </Popup.IsOpen>
                            <Border Name="DropDownBorder"
                                    BorderThickness="1"
                                    BorderBrush="{DynamicResource MenuSeparatorBrush}"
                                    Background="{DynamicResource BackgroundBrush}"
                                    MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                                    MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}">
                                <ScrollViewer CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}"
                                              Focusable="false"
                                              HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                                              VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained"
                                                    Margin="1" />
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsKeyboardFocusWithin"
                                           Value="true" />
                                <Condition Property="ComboBox.IsDropDownOpen"
                                           Value="false" />
                                <Condition Property="ComboBox.IsEditable"
                                           Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_EditableTextBox"
                                    Value="{DynamicResource Text1Brush}"
                                    Property="Control.Foreground" />
                            <Setter TargetName="ContentSite"
                                    Value="{DynamicResource Text1Brush}"
                                    Property="TextElement.Foreground" />
                        </MultiTrigger>
                        <Trigger Property="ComboBox.IsEditable"
                                 Value="true">
                            <Setter TargetName="SelectedItemBorder"
                                    Property="UIElement.Visibility"
                                    Value="Collapsed" />
                            <Setter TargetName="ContentSite"
                                    Property="UIElement.Visibility"
                                    Value="Collapsed" />
                            <Setter TargetName="PART_EditableTextBox"
                                    Property="UIElement.Visibility"
                                    Value="Visible" />
                            <Setter TargetName="DropDownButton"
                                    Property="Grid.Column"
                                    Value="2" />
                            <Setter TargetName="DropDownButton"
                                    Property="Grid.ColumnSpan"
                                    Value="1" />
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver"
                                 Value="true">
                            <Setter Value="{DynamicResource ComboBoxMouseOverBorderBrush}"
                                    Property="Control.BorderBrush" />
                        </Trigger>
                        <Trigger Property="ItemsControl.HasItems"
                                 Value="false">
                            <Setter TargetName="DropDownBorder"
                                    Property="FrameworkElement.MinHeight"
                                    Value="95" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region ContextMenu-->
    <Style x:Key="DropShadowBorderStyle"
           TargetType="{x:Type Border}">
        <Setter Property="FrameworkElement.Tag"
                Value="{DynamicResource {x:Static SystemParameters.DropShadowKey}}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}"
                         Value="True">
                <Setter Property="Border.Background"
                        Value="Transparent" />
                <Setter Property="Border.Padding"
                        Value="0,0,5,5" />
                <Setter Property="UIElement.Effect">
                    <Setter.Value>
                        <DropShadowEffect BlurRadius="4"
                                          ShadowDepth="1"
                                          Opacity="0.8" />
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="Control.Background"
                Value="{DynamicResource MenuBackgroundBrush}" />
        <Setter Property="Control.BorderThickness"
                Value="1" />
        <Setter Property="Control.BorderBrush"
                Value="{DynamicResource WindowBorderBrush}" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border Style="{StaticResource DropShadowBorderStyle}">
                        <Border Background="{TemplateBinding Control.Background}"
                                BorderBrush="{DynamicResource ControlFocusBorderBrush}"
                                BorderThickness="{TemplateBinding Control.BorderThickness}">
                            <ScrollViewer CanContentScroll="true"
                                          Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                <ItemsPresenter Margin="{TemplateBinding Control.Padding}"
                                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                            </ScrollViewer>
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region DataGrid-->
    <Controls:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
    <SolidColorBrush x:Key="DataGridBackgroundBrush"
                     Color="#FF333333" />
    <SolidColorBrush x:Key="DataGridForegroundBrush"
                     Color="#FFF0F0F0" />
    <SolidColorBrush x:Key="DataGridHeaderBackgroundBrush"
                     Color="#FF333333" />
    <SolidColorBrush x:Key="DataGridHeaderMouseOverBrush"
                     Color="#FFAAAAAA" />
    <SolidColorBrush x:Key="DataGridHeaderBorderBrush"
                     Color="#FF424242" />
    <SolidColorBrush x:Key="DataGridRowBorderBrush"
                     Color="#FF424242" />
    <SolidColorBrush x:Key="DataGridRowBackgroundBrush"
                     Color="#FF333333" />
    <SolidColorBrush x:Key="DataGridRowSelectedBrush"
                     Color="#FFBDBDBD" />
    <SolidColorBrush x:Key="DataGridMouseOverListItem"
                     Color="#FF4A4A4A" />
    <SolidColorBrush x:Key="GridLinesBrush"
                     Color="Transparent" />
    <SolidColorBrush x:Key="{x:Static DataGrid.FocusBorderBrushKey}"
                     Color="Red" />

    <!-- DataGridSelectAllButtonStyle-->
    <Style x:Key="{ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}"
           TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="Border"
                                   Fill="{StaticResource DataGridHeaderBackgroundBrush}"
                                   SnapsToDevicePixels="True" />
                        <Polygon x:Name="Arrow"
                                 Fill="Black"
                                 HorizontalAlignment="Right"
                                 Margin="8,8,3,3"
                                 Opacity="0.15"
                                 Points="0,10 10,10 10,0"
                                 Stretch="Uniform"
                                 VerticalAlignment="Bottom" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="Stroke"
                                    TargetName="Border"
                                    Value="{StaticResource DataGridHeaderMouseOverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="True">
                            <Setter Property="Fill"
                                    TargetName="Border"
                                    Value="{StaticResource DataGridHeaderMouseOverBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter Property="Visibility"
                                    TargetName="Arrow"
                                    Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- DataGrid -->
    <Style TargetType="{x:Type DataGrid}">
        <Setter Property="RowHeight"
                Value="22" />
        <Setter Property="HorizontalGridLinesBrush"
                Value="{DynamicResource GridLinesBrush}" />
        <Setter Property="VerticalGridLinesBrush"
                Value="{DynamicResource GridLinesBrush}" />
        <Setter Property="Background"
                Value="{DynamicResource DataGridBackgroundBrush}" />
        <Setter Property="Foreground"
                Value="{DynamicResource DataGridForegroundBrush}" />
        <Setter Property="BorderBrush"
                Value="{DynamicResource DataGridHeaderBorderBrush}" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="RowDetailsVisibilityMode"
                Value="VisibleWhenSelected" />
        <Setter Property="ScrollViewer.CanContentScroll"
                Value="true" />
        <Setter Property="ScrollViewer.PanningMode"
                Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGrid}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="DG_ScrollViewer"
                                      Focusable="false">
                            <ScrollViewer.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>
                                        <Button Command="{x:Static DataGrid.SelectAllCommand}"
                                                Focusable="false"
                                                Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}"
                                                Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                                                Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                        <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter"
                                                                        Grid.Column="1"
                                                                        Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                                                CanContentScroll="{TemplateBinding CanContentScroll}"
                                                                Grid.ColumnSpan="2"
                                                                Grid.Row="1" />
                                        <ScrollBar x:Name="PART_VerticalScrollBar"
                                                   Grid.Column="2"
                                                   Maximum="{TemplateBinding ScrollableHeight}"
                                                   Orientation="Vertical"
                                                   Grid.Row="1"
                                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                                   Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                   ViewportSize="{TemplateBinding ViewportHeight}"
                                                   Style="{StaticResource VerticalScrollBarStyle}" />
                                        <Grid Grid.Column="1"
                                              Grid.Row="2">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                                <ColumnDefinition Width="*" />
                                            </Grid.ColumnDefinitions>
                                            <ScrollBar x:Name="PART_HorizontalScrollBar"
                                                       Grid.Column="1"
                                                       Maximum="{TemplateBinding ScrollableWidth}"
                                                       Orientation="Horizontal"
                                                       Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                                       Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                       ViewportSize="{TemplateBinding ViewportWidth}"
                                                       Style="{StaticResource HorisontalScrollBarStyle}" />
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </ScrollViewer.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping"
                               Value="true" />
                    <!--<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>-->
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll"
                        Value="false" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!-- ColumnHeaderGripperStyle -->
    <Style x:Key="ColumnHeaderGripperStyle"
           TargetType="{x:Type Thumb}">
        <Setter Property="Width"
                Value="8" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Cursor"
                Value="SizeWE" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- DataGridColumnHeader -->
    <Style TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="BorderThickness"
                Value="1 1 0 1" />
        <Setter Property="BorderBrush"
                Value="{DynamicResource DataGridHeaderBorderBrush}" />
        <Setter Property="Background"
                Value="{DynamicResource DataGridHeaderBackgroundBrush}" />
        <Setter Property="Foreground"
                Value="{DynamicResource ForegroundBrush}" />
        <Setter Property="Padding"
                Value="3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Grid>
                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                Padding="{TemplateBinding Padding}">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                        <Thumb x:Name="PART_LeftHeaderGripper"
                               HorizontalAlignment="Left"
                               Style="{StaticResource ColumnHeaderGripperStyle}" />
                        <Thumb x:Name="PART_RightHeaderGripper"
                               HorizontalAlignment="Right"
                               Style="{StaticResource ColumnHeaderGripperStyle}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="Background"
                                    Value="{StaticResource DataGridHeaderMouseOverBrush}" />
                            <Setter Property="Foreground"
                                    Value="Black" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- DataGridRow -->
    <Style TargetType="{x:Type DataGridRow}">
        <Setter Property="Background"
                Value="{DynamicResource DataGridRowBackgroundBrush}" />
        <Setter Property="SnapsToDevicePixels"
                Value="true" />
        <Setter Property="Padding"
                Value="0" />
        <Setter Property="BorderBrush"
                Value="Transparent" />
        <Setter Property="Border.CornerRadius"
                Value="3" />
        <Setter Property="Validation.ErrorTemplate"
                Value="{x:Null}" />
        <Setter Property="ValidationErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <TextBlock Foreground="Red"
                               Margin="2,0,0,0"
                               Text="!"
                               VerticalAlignment="Center" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRow}">
                    <Border x:Name="DGR_Border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="0"
                            Background="{TemplateBinding Background}"
                            CornerRadius="{TemplateBinding Border.CornerRadius}"
                            SnapsToDevicePixels="True">
                        <SelectiveScrollingGrid>
                            <SelectiveScrollingGrid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </SelectiveScrollingGrid.ColumnDefinitions>
                            <SelectiveScrollingGrid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </SelectiveScrollingGrid.RowDefinitions>
                            <DataGridCellsPresenter Grid.Column="1"
                                                    ItemsPanel="{TemplateBinding ItemsPanel}"
                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <DataGridDetailsPresenter Grid.Column="1"
                                                      Grid.Row="1"
                                                      SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen, ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}, Converter={x:Static DataGrid.RowDetailsScrollingConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                                                      Visibility="{TemplateBinding DetailsVisibility}" />
                            <DataGridRowHeader Grid.RowSpan="2"
                                               SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical"
                                               Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Row}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                        </SelectiveScrollingGrid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver"
                                           Value="true" />
                                <Condition Property="IsSelected"
                                           Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background"
                                    TargetName="DGR_Border"
                                    Value="{StaticResource DataGridMouseOverListItem}" />
                        </MultiTrigger>
                        <Trigger Property="IsSelected"
                                 Value="True">
                            <Setter TargetName="DGR_Border"
                                    Property="Background"
                                    Value="{StaticResource DataGridRowSelectedBrush}" />
                            <Setter TargetName="DGR_Border"
                                    Property="CornerRadius"
                                    Value="3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected"
                     Value="True">
                <Setter Property="Background"
                        Value="{DynamicResource DataGridRowSelectedBrush}" />
                <Setter Property="Foreground"
                        Value="Black" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- DataGridCell -->
    <Style TargetType="{x:Type DataGridCell}">
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="BorderBrush"
                Value="Transparent" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="Padding"
                Value="5,0,5,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border x:Name="Border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True">
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="Center"
                                          Margin="{TemplateBinding Padding}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected"
                     Value="True">
                <Setter Property="Background"
                        Value="Transparent" />
                <Setter Property="Foreground"
                        Value="Black" />
                <Setter Property="BorderBrush"
                        Value="Transparent" />
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin"
                     Value="True">
                <Setter Property="BorderBrush"
                        Value="{DynamicResource {x:Static DataGrid.FocusBorderBrushKey}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected"
                               Value="true" />
                    <Condition Property="Selector.IsSelectionActive"
                               Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="Background"
                        Value="{StaticResource DataGridRowSelectedBrush}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled"
                     Value="false">
                <Setter Property="Foreground"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- RowHeaderGripperStyle -->
    <Style x:Key="RowHeaderGripperStyle"
           TargetType="{x:Type Thumb}">
        <Setter Property="Height"
                Value="8" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Cursor"
                Value="SizeNS" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- DataGridRowHeader -->
    <Style TargetType="{x:Type DataGridRowHeader}">
        <Setter Property="Background"
                Value="{DynamicResource DataGridBackgroundBrush}" />
        <Setter Property="BorderBrush"
                Value="{DynamicResource DataGridBackgroundBrush}" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRowHeader}">
                    <Grid>
                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                Padding="{TemplateBinding Padding}">
                            <StackPanel Orientation="Horizontal">
                                <ContentPresenter RecognizesAccessKey="True"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  VerticalAlignment="Center" />
                                <Control SnapsToDevicePixels="false"
                                         Template="{Binding ValidationErrorTemplate, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}"
                                         Visibility="{Binding (Validation.HasError), Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}" />
                            </StackPanel>
                        </Border>
                        <Thumb x:Name="PART_TopHeaderGripper"
                               Style="{StaticResource RowHeaderGripperStyle}"
                               VerticalAlignment="Top" />
                        <Thumb x:Name="PART_BottomHeaderGripper"
                               Style="{StaticResource RowHeaderGripperStyle}"
                               VerticalAlignment="Bottom" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region Expander-->
    <SolidColorBrush x:Key="Expander.Background"
                     Color="#FF595959" />
    <SolidColorBrush x:Key="Groupbox.Background"
                     Color="#FF595959" />
    <SolidColorBrush x:Key="Expander.MouseOver.Arrow.Stroke"
                     Color="#EFEFEF" />
    <SolidColorBrush x:Key="Expander.Disabled.Arrow.Stroke"
                     Color="#666666" />
    <SolidColorBrush x:Key="Expander.Static.Arrow.Stroke"
                     Color="#AAAAAA" />
    <Geometry x:Key="ExpanderNormalArrow">M 1,1.5 L 4.5,5 L 8,1.5</Geometry>
    <Geometry x:Key="ExpanderCheckedArrow">M 1,4.5  L 4.5,1  L 8,4.5</Geometry>
    <Geometry x:Key="ExpanderToggleButtonArrow">M5,-0 L9,5 1,5 z</Geometry>
    <Style x:Key="ExpanderRightHeaderStyle"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent"
                              SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="-90" />
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Path x:Name="arrow"
                                      Data="{StaticResource ExpanderNormalArrow}"
                                      HorizontalAlignment="Center"
                                      SnapsToDevicePixels="false"
                                      Stroke="{StaticResource Expander.Static.Arrow.Stroke}"
                                      StrokeThickness="2"
                                      VerticalAlignment="Center" />
                            </Grid>
                            <ContentPresenter HorizontalAlignment="Center"
                                              Margin="0,4,0,0"
                                              Grid.Row="1"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="True"
                                              VerticalAlignment="Top" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                 Value="true">
                            <Setter Property="Data"
                                    TargetName="arrow"
                                    Value="{StaticResource ExpanderCheckedArrow}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Stroke"
                                    TargetName="arrow"
                                    Value="{StaticResource Expander.MouseOver.Arrow.Stroke}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Stroke"
                                    TargetName="arrow"
                                    Value="{StaticResource Expander.Disabled.Arrow.Stroke}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderUpHeaderStyle"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent"
                              SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="180" />
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Path x:Name="arrow"
                                      Data="{StaticResource ExpanderNormalArrow}"
                                      HorizontalAlignment="Center"
                                      SnapsToDevicePixels="false"
                                      Stroke="{StaticResource Expander.Static.Arrow.Stroke}"
                                      StrokeThickness="2"
                                      VerticalAlignment="Center" />
                            </Grid>
                            <ContentPresenter Grid.Column="1"
                                              HorizontalAlignment="Left"
                                              Margin="4,0,0,0"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="True"
                                              VerticalAlignment="Center" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                 Value="true">
                            <Setter Property="Data"
                                    TargetName="arrow"
                                    Value="{StaticResource ExpanderCheckedArrow}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Stroke"
                                    TargetName="arrow"
                                    Value="{StaticResource Expander.MouseOver.Arrow.Stroke}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Stroke"
                                    TargetName="arrow"
                                    Value="{StaticResource Expander.Disabled.Arrow.Stroke}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderLeftHeaderStyle"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent"
                              SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="90" />
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Path x:Name="arrow"
                                      Data="{StaticResource ExpanderNormalArrow}"
                                      HorizontalAlignment="Center"
                                      SnapsToDevicePixels="false"
                                      Stroke="{StaticResource Expander.Static.Arrow.Stroke}"
                                      StrokeThickness="2"
                                      VerticalAlignment="Center" />
                            </Grid>
                            <ContentPresenter HorizontalAlignment="Center"
                                              Margin="0,4,0,0"
                                              Grid.Row="1"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="True"
                                              VerticalAlignment="Top" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                 Value="true">
                            <Setter Property="Data"
                                    TargetName="arrow"
                                    Value="{StaticResource ExpanderCheckedArrow}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Stroke"
                                    TargetName="arrow"
                                    Value="{StaticResource Expander.MouseOver.Arrow.Stroke}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Stroke"
                                    TargetName="arrow"
                                    Value="{StaticResource Expander.Disabled.Arrow.Stroke}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0"
                                   SnapsToDevicePixels="true"
                                   Stroke="Black"
                                   StrokeThickness="1"
                                   StrokeDashArray="1 2" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderDownHeaderStyle"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent"
                              SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Path x:Name="arrow"
                                  Data="{StaticResource ExpanderNormalArrow}"
                                  HorizontalAlignment="Center"
                                  SnapsToDevicePixels="false"
                                  Stroke="{StaticResource Expander.Static.Arrow.Stroke}"
                                  StrokeThickness="2"
                                  VerticalAlignment="Center" />
                            <ContentPresenter Grid.Column="1"
                                              HorizontalAlignment="Left"
                                              Margin="4,0,0,0"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="True"
                                              VerticalAlignment="Center" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                 Value="true">
                            <Setter Property="Data"
                                    TargetName="arrow"
                                    Value="{StaticResource ExpanderCheckedArrow}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Stroke"
                                    TargetName="arrow"
                                    Value="{StaticResource Expander.MouseOver.Arrow.Stroke}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Stroke"
                                    TargetName="arrow"
                                    Value="{StaticResource Expander.Disabled.Arrow.Stroke}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Expander}">
        <Setter Property="Foreground"
                Value="{StaticResource Expander.MouseOver.Arrow.Stroke}" />
        <Setter Property="FontFamily"
                Value="Segoe UI" />
        <Setter Property="Padding"
                Value="2" />
        <Setter Property="Background"
                Value="{StaticResource Expander.Background}" />
        <Setter Property="HorizontalContentAlignment"
                Value="Stretch" />
        <Setter Property="VerticalContentAlignment"
                Value="Stretch" />
        <Setter Property="BorderBrush"
                Value="Transparent" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            CornerRadius="4"
                            SnapsToDevicePixels="true">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite"
                                          ContentTemplate="{TemplateBinding HeaderTemplate}"
                                          ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                          Content="{TemplateBinding Header}"
                                          DockPanel.Dock="Top"
                                          Foreground="{TemplateBinding Foreground}"
                                          FontWeight="{TemplateBinding FontWeight}"
                                          FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}"
                                          FontStyle="{TemplateBinding FontStyle}"
                                          FontStretch="{TemplateBinding FontStretch}"
                                          FontSize="{TemplateBinding FontSize}"
                                          FontFamily="{TemplateBinding FontFamily}"
                                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          Margin="5,1,1,1"
                                          MinWidth="0"
                                          MinHeight="0"
                                          Padding="{TemplateBinding Padding}"
                                          Style="{DynamicResource ExpanderToggleButtonStyle}"
                                          VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <ContentPresenter x:Name="ExpandSite"
                                              DockPanel.Dock="Bottom"
                                              Focusable="false"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}"
                                              Visibility="Collapsed"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded"
                                 Value="true">
                            <Setter Property="Visibility"
                                    TargetName="ExpandSite"
                                    Value="Visible" />
                        </Trigger>
                        <Trigger Property="ExpandDirection"
                                 Value="Right">
                            <Setter Property="DockPanel.Dock"
                                    TargetName="ExpandSite"
                                    Value="Right" />
                            <Setter Property="DockPanel.Dock"
                                    TargetName="HeaderSite"
                                    Value="Left" />
                            <Setter Property="Style"
                                    TargetName="HeaderSite"
                                    Value="{StaticResource ExpanderRightHeaderStyle}" />
                        </Trigger>
                        <Trigger Property="ExpandDirection"
                                 Value="Up">
                            <Setter Property="DockPanel.Dock"
                                    TargetName="ExpandSite"
                                    Value="Top" />
                            <Setter Property="DockPanel.Dock"
                                    TargetName="HeaderSite"
                                    Value="Bottom" />
                            <Setter Property="Style"
                                    TargetName="HeaderSite"
                                    Value="{StaticResource ExpanderUpHeaderStyle}" />
                        </Trigger>
                        <Trigger Property="ExpandDirection"
                                 Value="Left">
                            <Setter Property="DockPanel.Dock"
                                    TargetName="ExpandSite"
                                    Value="Left" />
                            <Setter Property="DockPanel.Dock"
                                    TargetName="HeaderSite"
                                    Value="Right" />
                            <Setter Property="Style"
                                    TargetName="HeaderSite"
                                    Value="{StaticResource ExpanderLeftHeaderStyle}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderToggleButtonStyle"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent"
                              SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="8" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Path x:Name="arrow"
                                  Grid.ColumnSpan="2"
                                  HorizontalAlignment="Left"
                                  Fill="{StaticResource Expander.Static.Arrow.Stroke}"
                                  Stroke="{StaticResource Expander.Static.Arrow.Stroke}"
                                  StrokeThickness="1"
                                  VerticalAlignment="Top"
                                  Data="{StaticResource ExpanderToggleButtonArrow}"
                                  Height="4.5"
                                  Stretch="Fill"
                                  Width="8"
                                  RenderTransformOrigin="0.5,0.5"
                                  Margin="2.068,6.27,0,0">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <RotateTransform Angle="135" />
                                        <TranslateTransform X="0.17819090885901012"
                                                            Y="0.43019090885900946" />
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                            <ContentPresenter Grid.Column="1"
                                              HorizontalAlignment="Left"
                                              Margin="4,0,0,0"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="True"
                                              VerticalAlignment="Center" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                 Value="false">
                            <Setter Property="Margin"
                                    TargetName="arrow"
                                    Value="-0.526,4.842,0,0"></Setter>
                            <Setter Property="RenderTransform"
                                    TargetName="arrow">
                                <Setter.Value>
                                    <TransformGroup>
                                        <RotateTransform Angle="90" />
                                        <TranslateTransform X="0.17819090885901012"
                                                            Y="0.43019090885900946" />
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Fill"
                                    TargetName="arrow"
                                    Value="Transparent" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver"
                                           Value="true" />
                                <Condition Property="IsChecked"
                                           Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Fill"
                                    TargetName="arrow"
                                    Value="{StaticResource Expander.MouseOver.Arrow.Stroke}" />
                            <Setter Property="Stroke"
                                    TargetName="arrow"
                                    Value="{StaticResource Expander.MouseOver.Arrow.Stroke}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver"
                                           Value="true" />
                                <Condition Property="IsChecked"
                                           Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Fill"
                                    TargetName="arrow"
                                    Value="Transparent" />
                            <Setter Property="Stroke"
                                    TargetName="arrow"
                                    Value="{StaticResource Expander.MouseOver.Arrow.Stroke}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled"
                                 Value="false" />
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<Style x:Uid="Style_121"
           TargetType="{x:Type Expander}">
        <Setter x:Uid="Setter_1203"
                Property="Control.Background"
                Value="{DynamicResource PaletteBrush}" />
        <Setter x:Uid="Setter_1204"
                Property="Control.BorderBrush">
            <Setter.Value>
                <x:NullExtension />
            </Setter.Value>
        </Setter>
        <Setter x:Uid="Setter_409"
                Property="Control.Foreground"
                Value="{DynamicResource Text1Brush}" />
        <Setter x:Uid="Setter_1620"
                Property="Control.BorderBrush"
                Value="{DynamicResource PaletteBrush}" />
        <Setter x:Uid="Setter_1205"
                Property="Control.Template">
            <Setter.Value>
                <ControlTemplate x:Uid="ControlTemplate_61"
                                 TargetType="{x:Type Expander}">
                    <Grid x:Uid="Grid_43">
                        <Grid.RowDefinitions>
                            <RowDefinition x:Uid="RowDefinition_24"
                                           Height="Auto" />
                            <RowDefinition x:Name="ContentRow"
                                           x:Uid="RowDefinition_25"
                                           Height="*" />
                        </Grid.RowDefinitions>
                        <Border x:Name="HeaderBorder"
                                x:Uid="Border_31"
                                Background="{TemplateBinding Control.Background}"
                                BorderBrush="{TemplateBinding Control.BorderBrush}"
                                BorderThickness="1,1,1,1"
                                CornerRadius="4">
                            <CheckBox x:Name="HeaderSite"
                                      x:Uid="CheckBox_5"
                                      Focusable="false"
                                      Margin="4,0,0,0"
                                      Background="{DynamicResource Text1Brush}"
                                      OverridesDefaultStyle="true"
                                      HorizontalAlignment="Stretch"
                                      VerticalAlignment="Stretch"
                                      Content="{TemplateBinding HeaderedContentControl.Header}">
                                <ToggleButton.IsChecked>
                                    <Binding Path="IsExpanded"
                                             Mode="TwoWay"
                                             RelativeSource="{RelativeSource TemplatedParent}" />
                                </ToggleButton.IsChecked>
                                <Control.Template>
                                    <ControlTemplate x:Uid="ControlTemplate_62"
                                                     TargetType="{x:Type CheckBox}">
                                        <Grid x:Name="CheckBoxContent"
                                              x:Uid="Grid_72"
                                              ToolTip="Expand"
                                              Background="Transparent"
                                              HorizontalAlignment="Left">
                                            <Controls:Icon x:Name="Arrow"
                                                           x:Uid="Controls:Icon_1"
                                                           HorizontalAlignment="Left"
                                                           VerticalAlignment="Center"
                                                           Margin="4"
                                                           Height="8"
                                                           Width="8"
                                                           RenderTransformOrigin="0.5,0.5"
                                                           SourceBrush="{DynamicResource PaneExpanderIcon}"
                                                           RedChroma="{DynamicResource ArrowExpandCollapseDefaultBrush}" />
                                            <ContentPresenter x:Name="ContentHeader"
                                                              x:Uid="ContentPresenter_26"
                                                              HorizontalAlignment="Left"
                                                              Focusable="false"
                                                              Margin="16,4,0,4"
                                                              RecognizesAccessKey="true" />
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger x:Uid="Trigger_1034"
                                                     Property="ToggleButton.IsChecked"
                                                     Value="True">
                                                <Setter x:Uid="Setter_70"
                                                        TargetName="CheckBoxContent"
                                                        Property="FrameworkElement.ToolTip"
                                                        Value="Collapse" />
                                                <Setter x:Uid="Setter_1206"
                                                        TargetName="Arrow"
                                                        Property="UIElement.RenderTransform">
                                                    <Setter.Value>
                                                        <RotateTransform x:Uid="RotateTransform_14"
                                                                         Angle="90" />
                                                    </Setter.Value>
                                                </Setter>
                                            </Trigger>
                                            <Trigger x:Uid="Trigger_1035"
                                                     Property="UIElement.IsMouseOver"
                                                     Value="true">
                                                <Setter x:Uid="Setter_1208"
                                                        Value="{DynamicResource ArrowExpandCollapseMouseOverBrush}"
                                                        TargetName="Arrow"
                                                        Property="Controls:Icon.RedChroma" />
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Control.Template>
                            </CheckBox>
                        </Border>
                        <Border x:Name="ExpandSite"
                                x:Uid="Border_32"
                                Visibility="Collapsed"
                                Grid.Row="1"
                                Background="{TemplateBinding Control.Background}"
                                BorderBrush="{TemplateBinding Control.BorderBrush}"
                                CornerRadius="0,0,4,4"
                                BorderThickness="1,0,1,1">
                            <ContentPresenter x:Uid="ContentPresenter_27"
                                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                              Margin="{TemplateBinding Control.Padding}"
                                              Focusable="false" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger x:Uid="Trigger_1036"
                                 Property="Expander.IsExpanded"
                                 Value="true">
                            <Setter x:Uid="Setter_1210"
                                    TargetName="ExpandSite"
                                    Property="UIElement.Visibility"
                                    Value="Visible" />
                            <Setter x:Uid="Setter_1211"
                                    TargetName="HeaderBorder"
                                    Property="Border.CornerRadius"
                                    Value="4,4,0,0" />
                            <Setter x:Uid="Setter_1621"
                                    TargetName="HeaderBorder"
                                    Property="Border.BorderThickness"
                                    Value="1,1,1,0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger x:Uid="Trigger_1064"
                     Property="Expander.ExpandDirection"
                     Value="Right">
                <Setter x:Uid="Setter_1304"
                        Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate x:Uid="ControlTemplate_70"
                                         TargetType="{x:Type Expander}">
                            <Grid x:Uid="Grid_51">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition x:Uid="ColumnDefinition_43"
                                                      Width="Auto" />
                                    <ColumnDefinition x:Name="ContentRow"
                                                      x:Uid="ColumnDefinition_44"
                                                      Width="*" />
                                </Grid.ColumnDefinitions>
                                <Border x:Name="HeaderBorder"
                                        x:Uid="Border_44"
                                        Background="{TemplateBinding Control.Background}"
                                        BorderBrush="{TemplateBinding Control.BorderBrush}"
                                        CornerRadius="4">
                                    <CheckBox x:Name="HeaderSite"
                                              x:Uid="CheckBox_6"
                                              Focusable="false"
                                              Margin="0,4,0,0"
                                              Background="{DynamicResource Text1Brush}"
                                              OverridesDefaultStyle="true"
                                              HorizontalAlignment="Stretch"
                                              VerticalAlignment="Stretch"
                                              Content="{TemplateBinding HeaderedContentControl.Header}">
                                        <ToggleButton.IsChecked>
                                            <Binding Path="IsExpanded"
                                                     Mode="TwoWay"
                                                     RelativeSource="{RelativeSource TemplatedParent}" />
                                        </ToggleButton.IsChecked>
                                        <Control.Template>
                                            <ControlTemplate x:Uid="ControlTemplate_71"
                                                             TargetType="{x:Type CheckBox}">
                                                <Grid x:Name="CheckBoxContent"
                                                      x:Uid="Grid_53"
                                                      ToolTip="Collapse"
                                                      Background="Transparent"
                                                      VerticalAlignment="Top">
                                                    <Controls:Icon x:Name="Arrow"
                                                                   x:Uid="Arrow"
                                                                   HorizontalAlignment="Center"
                                                                   VerticalAlignment="Top"
                                                                   Margin="4"
                                                                   Height="8"
                                                                   Width="8"
                                                                   RenderTransformOrigin="0.5,0.5"
                                                                   SourceBrush="{DynamicResource PaneExpanderIcon}"
                                                                   RedChroma="{DynamicResource ArrowExpandCollapseDefaultBrush}" />
                                                    <ContentPresenter x:Name="ContentHeader"
                                                                      x:Uid="ContentPresenter_40"
                                                                      Focusable="false"
                                                                      Margin="4,20,4,0"
                                                                      RecognizesAccessKey="true"
                                                                      HorizontalAlignment="Center"
                                                                      VerticalAlignment="Bottom">
                                                        <FrameworkElement.LayoutTransform>
                                                            <RotateTransform x:Uid="RotateTransform_13"
                                                                             Angle="-90" />
                                                        </FrameworkElement.LayoutTransform>
                                                    </ContentPresenter>
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <Trigger x:Uid="Trigger_1065"
                                                             Property="ToggleButton.IsChecked"
                                                             Value="False">
                                                        <Setter x:Uid="Setter_1759"
                                                                TargetName="CheckBoxContent"
                                                                Property="FrameworkElement.ToolTip"
                                                                Value="Expand" />
                                                        <Setter x:Uid="Setter_1760"
                                                                TargetName="Arrow"
                                                                Property="UIElement.RenderTransform">
                                                            <Setter.Value>
                                                                <RotateTransform x:Uid="RotateTransform_16"
                                                                                 Angle="90" />
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Trigger>
                                                    <Trigger x:Uid="Trigger_1066"
                                                             Property="UIElement.IsMouseOver"
                                                             Value="true">
                                                        <Setter x:Uid="Setter_1761"
                                                                Value="{DynamicResource ArrowExpandCollapseMouseOverBrush}"
                                                                TargetName="Arrow"
                                                                Property="Controls:Icon.RedChroma" />
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Control.Template>
                                    </CheckBox>
                                </Border>
                                <Border x:Name="ExpandSite"
                                        x:Uid="Border_45"
                                        Visibility="Collapsed"
                                        Grid.Column="1"
                                        Background="{TemplateBinding Control.Background}"
                                        BorderBrush="{TemplateBinding Control.BorderBrush}"
                                        CornerRadius="0,0,4,4">
                                    <ContentPresenter x:Uid="ContentPresenter_41"
                                                      HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                                      VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                                      Margin="{TemplateBinding Control.Padding}"
                                                      Focusable="false" />
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger x:Uid="Trigger_1067"
                                         Property="Expander.IsExpanded"
                                         Value="true">
                                    <Setter x:Uid="Setter_1309"
                                            TargetName="ExpandSite"
                                            Property="UIElement.Visibility"
                                            Value="Visible" />
                                    <Setter x:Uid="Setter_1310"
                                            TargetName="HeaderBorder"
                                            Property="Border.CornerRadius"
                                            Value="4,4,0,0" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>-->
    <!--#endregion-->

    <!--#region Grid-->
    <Style x:Key="DefaultGrip"
           TargetType="{x:Type Control}">
        <Setter Property="Control.IsTabStop"
                Value="false" />
        <Setter Property="UIElement.Focusable"
                Value="false" />
        <Setter Property="FrameworkElement.Cursor"
                Value="SizeNWSE" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <Grid Background="Transparent"
                          Height="12"
                          Width="12">
                        <Path Fill="{DynamicResource ButtonOverBrush}"
                              Stretch="Fill"
                              Margin="-0.5,-0.5,-0.5,-0.5"
                              Data="M 12,0 L 12,12 0,12 Z" />
                        <Path Fill="{DynamicResource PaneBrush}"
                              Stretch="Fill"
                              HorizontalAlignment="Right"
                              Margin="0,0,1.5,1.5"
                              VerticalAlignment="Bottom"
                              Width="4"
                              Height="4"
                              Data="M 10,7 L 10,10 7,10 Z" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ResizeGrip}"
           BasedOn="{StaticResource DefaultGrip}" />
    <Style x:Key="GridViewColumnHeaderGripper"
           TargetType="{x:Type Thumb}">
        <Setter Property="Canvas.Right"
                Value="-8.5" />
        <Setter Property="FrameworkElement.Width"
                Value="18" />
        <Setter Property="FrameworkElement.Height">
            <Setter.Value>
                <Binding Path="ActualHeight"
                         RelativeSource="{RelativeSource TemplatedParent}" />
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Padding"
                Value="0,3,0,3" />
        <Setter Property="Control.Background"
                Value="{DynamicResource RecessedBrush}" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Control.Padding}"
                            Background="Transparent">
                        <Rectangle HorizontalAlignment="Center"
                                   Width="1"
                                   Fill="{TemplateBinding Control.Background}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type GridViewColumnHeader}">
        <Style.Triggers>
            <Trigger Property="GridViewColumnHeader.Role"
                     Value="Floating">
                <Setter Property="UIElement.Opacity"
                        Value="0.7" />
                <Setter Property="Control.Background"
                        Value="{DynamicResource ButtonOverBrush}" />
                <Setter Property="Control.Foreground"
                        Value="{DynamicResource BackgroundBrush}" />
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                            <ControlTemplate.Triggers>
                                <Trigger Property="FrameworkElement.Height"
                                         Value="Auto">
                                    <Setter Property="FrameworkElement.MinHeight"
                                            Value="20" />
                                </Trigger>
                                <Trigger Property="FrameworkElement.Width"
                                         Value="Auto">
                                    <Setter Property="FrameworkElement.MinWidth"
                                            Value="10" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                            <DockPanel Background="{TemplateBinding Control.Background}">
                                <Border Name="HighlightBorder"
                                        DockPanel.Dock="Bottom"
                                        Background="{TemplateBinding Control.Background}"
                                        BorderBrush="{TemplateBinding Control.Background}"
                                        Height="3" />
                                <Border BorderThickness="{TemplateBinding Control.BorderThickness}"
                                        BorderBrush="{TemplateBinding Control.Background}"
                                        Padding="{TemplateBinding Control.Padding}">
                                    <ContentPresenter VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                                      HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" />
                                </Border>
                            </DockPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Control.VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Control.HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="Control.Background"
                Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Control.Foreground"
                Value="{DynamicResource Text1Brush}" />
        <Setter Property="Control.BorderBrush"
                Value="{DynamicResource RecessedBrush}" />
        <Setter Property="Control.BorderThickness"
                Value="0,0,0,1" />
        <Setter Property="Control.Padding"
                Value="4,0,4,0" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                    <Grid>
                        <Border BorderThickness="{TemplateBinding Control.BorderThickness}"
                                Background="{TemplateBinding Control.Background}"
                                BorderBrush="{TemplateBinding Control.BorderBrush}">
                            <ContentPresenter Margin="{TemplateBinding Control.Padding}"
                                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                              RecognizesAccessKey="true" />
                        </Border>
                        <Canvas>
                            <Thumb Name="PART_HeaderGripper"
                                   Style="{StaticResource GridViewColumnHeaderGripper}" />
                        </Canvas>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver"
                                 Value="true">
                            <Setter TargetName="PART_HeaderGripper"
                                    Property="Control.Background"
                                    Value="Transparent" />
                            <Setter Value="{DynamicResource ButtonOverBrush}"
                                    Property="Control.Background" />
                            <Setter Value="{DynamicResource BackgroundBrush}"
                                    Property="Control.Foreground" />
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed"
                                 Value="true">
                            <Setter TargetName="PART_HeaderGripper"
                                    Property="UIElement.Visibility"
                                    Value="Hidden" />
                            <Setter Value="{DynamicResource ButtonSelectionGrad}"
                                    Property="Control.Background" />
                            <Setter Value="{DynamicResource BackgroundBrush}"
                                    Property="Control.Foreground" />
                        </Trigger>
                        <Trigger Property="FrameworkElement.Height"
                                 Value="Auto">
                            <Setter Property="FrameworkElement.MinHeight"
                                    Value="20" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type GridSplitter}">
        <Setter Property="FrameworkElement.MinWidth"
                Value="3" />
        <Setter Property="FrameworkElement.MinHeight"
                Value="3" />
        <Setter Property="UIElement.Focusable"
                Value="false" />
        <Setter Property="Control.Background"
                Value="Transparent" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridSplitter}">
                    <Rectangle Name="Background"
                               Fill="{TemplateBinding Control.Background}"
                               StrokeThickness="0"
                               RadiusX="2"
                               RadiusY="2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region GroupBox-->
    <Style x:Uid="Style_127"
           TargetType="{x:Type GroupBox}">
        <Setter x:Uid="Setter_1990"
                Property="Control.Background"
                Value="Transparent" />
        <Setter x:Uid="Setter_1254"
                Property="Control.BorderBrush"
                Value="Transparent" />
        <Setter x:Uid="Setter_1255"
                Property="Control.BorderThickness"
                Value="1,1,1,1" />
        <Setter x:Uid="Setter_1991"
                Property="Control.Foreground"
                Value="{DynamicResource Text1Brush}" />
        <Setter x:Uid="Setter_1256"
                Property="Control.Template">
            <Setter.Value>
                <ControlTemplate x:Uid="ControlTemplate_64"
                                 TargetType="{x:Type GroupBox}">
                    <Grid x:Name="Grid"
                          x:Uid="Grid_47"
                          SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Uid="ColumnDefinition_29"
                                              Width="6" />
                            <ColumnDefinition x:Uid="ColumnDefinition_30"
                                              Width="Auto" />
                            <ColumnDefinition x:Uid="ColumnDefinition_31"
                                              Width="*" />
                            <ColumnDefinition x:Uid="ColumnDefinition_32"
                                              Width="6" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Uid="RowDefinition_26"
                                           Height="Auto" />
                            <RowDefinition x:Uid="RowDefinition_27"
                                           Height="Auto" />
                            <RowDefinition x:Uid="RowDefinition_28"
                                           Height="*" />
                            <RowDefinition x:Uid="RowDefinition_29"
                                           Height="6" />
                        </Grid.RowDefinitions>
                        <Border x:Name="Border"
                                x:Uid="Border_34"
                                Grid.Column="0"
                                Grid.ColumnSpan="4"
                                Grid.Row="1"
                                Grid.RowSpan="3"
                                Background="{TemplateBinding Control.Background}"
                                BorderBrush="#00FFFFFF"
                                BorderThickness="{TemplateBinding Control.BorderThickness}"
                                CornerRadius="4,4,4,4" />
                        <Border x:Name="Header"
                                x:Uid="Border_35"
                                Grid.Column="1"
                                Grid.Row="0"
                                Grid.RowSpan="2"
                                Padding="3,0,3,0">
                            <ContentPresenter x:Name="ContentPresenter"
                                              x:Uid="ContentPresenter_30"
                                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                              Content="{TemplateBinding HeaderedContentControl.Header}"
                                              ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
                                              RecognizesAccessKey="true"
                                              ContentTemplateSelector="{TemplateBinding HeaderedContentControl.HeaderTemplateSelector}"
                                              ContentSource="Header" />
                        </Border>
                        <ContentPresenter x:Name="ContentPresenter1"
                                          x:Uid="ContentPresenter_31"
                                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                          Margin="{TemplateBinding Control.Padding}"
                                          Grid.Column="1"
                                          Grid.ColumnSpan="2"
                                          Grid.Row="2"
                                          Content="{TemplateBinding ContentControl.Content}"
                                          ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}" />
                        <Border x:Name="Border1"
                                x:Uid="Border_36"
                                Grid.ColumnSpan="4"
                                Grid.Row="1"
                                Grid.RowSpan="3"
                                BorderBrush="{TemplateBinding Control.BorderBrush}"
                                BorderThickness="{TemplateBinding Control.BorderThickness}"
                                CornerRadius="4,4,4,4">
                            <UIElement.OpacityMask>
                                <MultiBinding x:Uid="MultiBinding_6"
                                              UpdateSourceTrigger="Default"
                                              ConverterParameter="7">
                                    <MultiBinding.Converter>
                                        <BorderGapMaskConverter x:Uid="BorderGapMaskConverter_1" />
                                    </MultiBinding.Converter>
                                    <Binding x:Uid="Binding_22"
                                             Path="ActualWidth"
                                             ElementName="Header" />
                                    <Binding x:Uid="Binding_23"
                                             Path="ActualWidth"
                                             RelativeSource="{RelativeSource Self, AncestorType={x:Null}}" />
                                    <Binding x:Uid="Binding_24"
                                             Path="ActualHeight"
                                             RelativeSource="{RelativeSource Self, AncestorType={x:Null}}" />
                                </MultiBinding>
                            </UIElement.OpacityMask>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region Hyperlink-->
    <Style TargetType="{x:Type Hyperlink}">
        <Style.Triggers>
            <Trigger Property="ContentElement.IsEnabled"
                     Value="false">
                <Setter Property="TextElement.Foreground"
                        Value="{DynamicResource FadedTextBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="TextElement.Foreground"
                Value="{DynamicResource HyperlinkBrush}" />
    </Style>
    <Style x:Key="ExpressionDialogHyperlink"
           TargetType="{x:Type Hyperlink}">
        <Style.Triggers>
            <Trigger Property="ContentElement.IsEnabled"
                     Value="false">
                <Setter Property="TextElement.Foreground"
                        Value="{DynamicResource ButtonDisabledTextBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="TextElement.FontFamily"
                Value="{DynamicResource {x:Static SystemFonts.IconFontFamilyKey}}" />
        <Setter Property="TextElement.FontSize"
                Value="{DynamicResource {x:Static SystemFonts.IconFontSizeKey}}" />
        <Setter Property="TextElement.FontWeight"
                Value="{DynamicResource {x:Static SystemFonts.IconFontWeightKey}}" />
        <Setter Property="TextElement.Foreground"
                Value="#3399FF" />
    </Style>
    <!--#endregion-->

    <!--#region Label-->
    <Style TargetType="{x:Type Label}">
        <Setter Property="Control.FontFamily"
                Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="Control.FontSize"
                Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="Control.FontWeight"
                Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Control.Foreground"
                Value="{DynamicResource Text1Brush}" />
        <Setter Property="FrameworkElement.VerticalAlignment"
                Value="Center" />
        <Setter Property="Control.Padding"
                Value="0" />
        <Style.Triggers>
            <Trigger Property="UIElement.IsEnabled"
                     Value="false">
                <Setter Property="Control.Foreground"
                        Value="{DynamicResource DialogDisabledTextBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->

    <!--#region ListBox-->
    <Style x:Key="ExpressionListBoxItem"
           TargetType="{x:Type ListBoxItem}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="UIElement.IsMouseOver"
                               Value="true" />
                    <Condition Property="ListBoxItem.IsSelected"
                               Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="Control.Background"
                        Value="{DynamicResource ListHoverBrush}" />
                <Setter Property="Control.Foreground"
                        Value="{DynamicResource ListHoverTextBrush}" />
            </MultiTrigger>
            <Trigger Property="ListBoxItem.IsSelected"
                     Value="true">
                <Setter Property="Control.Background"
                        Value="{DynamicResource ListSelectedBrush}" />
                <Setter Property="Control.Foreground"
                        Value="{DynamicResource ListSelectedTextBrush}" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled"
                     Value="false">
                <Setter Property="Control.Background"
                        Value="{DynamicResource ListBackgroundBrush}" />
                <Setter Property="Control.Foreground"
                        Value="{DynamicResource DisabledTextBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Control.FontFamily"
                Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="Control.FontSize"
                Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="Control.FontWeight"
                Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Control.Foreground"
                Value="{DynamicResource Text1Brush}" />
        <Setter Property="Control.Padding"
                Value="4,2,4,2" />
        <Setter Property="FrameworkElement.MinHeight"
                Value="20" />
        <Setter Property="Control.IsTabStop"
                Value="false" />
        <Setter Property="FrameworkElement.FocusVisualStyle">
            <Setter.Value>
                <x:NullExtension />
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border Name="ListBoxItemRoot"
                            BorderThickness="{TemplateBinding Control.BorderThickness}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}"
                            Background="{TemplateBinding Control.Background}">
                        <ContentPresenter Name="ListBoxItemContent"
                                          Content="{TemplateBinding ContentControl.Content}"
                                          ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"
                                          HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                          Margin="{TemplateBinding Control.Padding}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpressionDialogListBoxItem"
           TargetType="{x:Type ListBoxItem}"
           BasedOn="{StaticResource ExpressionListBoxItem}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsFocused"
                     Value="true">
                <Setter Property="UIElement.Opacity"
                        Value="1.0" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Control.IsTabStop"
                Value="true" />
        <Setter Property="UIElement.Focusable"
                Value="true" />
        <Setter Property="UIElement.Opacity"
                Value="0.8" />
        <Setter Property="FrameworkElement.FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle SnapsToDevicePixels="true"
                                           Stroke="{DynamicResource ControlFocusBorderBrush}"
                                           StrokeThickness="1"
                                           Margin="1"
                                           RadiusX="2"
                                           RadiusY="2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpressionBlueListBoxItem"
           TargetType="{x:Type ListBoxItem}"
           BasedOn="{StaticResource ExpressionDialogListBoxItem}">
        <Setter Property="FrameworkElement.MinHeight"
                Value="29" />
        <Setter Property="Control.FontSize"
                Value="15" />
        <Setter Property="Control.HorizontalContentAlignment"
                Value="Stretch" />
        <Setter Property="Control.VerticalContentAlignment"
                Value="Stretch" />
        <Setter Property="UIElement.Opacity"
                Value="1.0" />
        <Setter Property="FrameworkElement.FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle SnapsToDevicePixels="true"
                                           Stroke="{DynamicResource ButtonDefaultedBrush}"
                                           StrokeThickness="1"
                                           RadiusX="2"
                                           RadiusY="2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpressionListBox"
           TargetType="{x:Type ListBox}">
        <Setter Property="Control.BorderBrush"
                Value="{DynamicResource ListBackgroundBrush}" />
        <Setter Property="Control.Background"
                Value="{DynamicResource ListBackgroundBrush}" />
        <Setter Property="Control.Foreground"
                Value="{DynamicResource Text1Brush}" />
        <Setter Property="ItemsControl.ItemContainerStyle"
                Value="{StaticResource ExpressionListBoxItem}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
                Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
                Value="Auto" />
        <Setter Property="Control.BorderThickness"
                Value="1,1,1,1" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border CornerRadius="2"
                            Background="{TemplateBinding Control.Background}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}"
                            BorderThickness="{TemplateBinding Control.BorderThickness}">
                        <ScrollViewer CanContentScroll="true"
                                      HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                                      VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
                                      Padding="{TemplateBinding Control.Padding}">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ListBox}"
           BasedOn="{StaticResource ExpressionListBox}" />
    <!--#endregion-->

    <!--#region ListView-->
    <Style TargetType="{x:Type ListViewItem}"
           BasedOn="{StaticResource ExpressionListBoxItem}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border Name="ListBoxItemRoot"
                            CornerRadius="2"
                            BorderThickness="1,0,1,0"
                            BorderBrush="{TemplateBinding Control.BorderBrush}"
                            Background="{TemplateBinding Control.Background}">
                        <GridViewRowPresenter Margin="{TemplateBinding Control.Padding}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.HorizontalContentAlignment"
                Value="Stretch" />
    </Style>
    <Style TargetType="{x:Type ListView}">
        <Setter Property="Control.BorderBrush"
                Value="{DynamicResource ListBackgroundBrush}" />
        <Setter Property="Control.Background"
                Value="{DynamicResource ListBackgroundBrush}" />
        <Setter Property="Control.Foreground"
                Value="{DynamicResource Text1Brush}" />
        <Setter Property="Control.BorderThickness"
                Value="1" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
                Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
                Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll"
                Value="true" />
        <Setter Property="Control.VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border CornerRadius="2"
                            Background="{TemplateBinding Control.Background}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}"
                            BorderThickness="{TemplateBinding Control.BorderThickness}">
                        <ScrollViewer Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}"
                                      Padding="{TemplateBinding Control.Padding}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="NarrowGridSplitter"
           TargetType="{x:Type GridSplitter}">
        <Setter Property="Control.Background"
                Value="Transparent" />
        <Setter Property="UIElement.Focusable"
                Value="false" />
        <Setter Property="Panel.ZIndex"
                Value="1" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridSplitter}">
                    <Rectangle Name="Background"
                               Fill="{TemplateBinding Control.Background}" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="GridSplitter.ResizeDirection"
                                 Value="Columns">
                            <Setter TargetName="Background"
                                    Property="FrameworkElement.Margin"
                                    Value="-1,0,-2,0" />
                            <Setter Property="FrameworkElement.Width"
                                    Value="2" />
                        </Trigger>
                        <Trigger Property="GridSplitter.ResizeDirection"
                                 Value="Rows">
                            <Setter TargetName="Background"
                                    Property="FrameworkElement.Margin"
                                    Value="0,-3,0,0" />
                            <Setter Property="FrameworkElement.Height"
                                    Value="2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region Menu-->
    <Style TargetType="{x:Type Menu}">
        <Setter Property="Control.Background"
                Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Control.BorderBrush"
                Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="UIElement.SnapsToDevicePixels"
                Value="true" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Grid>
                        <Border x:Name="Border"
                                Margin="1"
                                BorderBrush="{TemplateBinding Control.BorderBrush}"
                                BorderThickness="{TemplateBinding Control.BorderThickness}" />
                        <StackPanel Background="{TemplateBinding Control.Background}"
                                    IsItemsHost="true"
                                    ClipToBounds="true"
                                    Orientation="Horizontal" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled"
                                 Value="false">
                            <Setter Value="{DynamicResource DisabledBackgroundBrush}"
                                    TargetName="Border"
                                    Property="Border.Background" />
                            <Setter Value="{DynamicResource DisabledBorderBrush}"
                                    TargetName="Border"
                                    Property="Border.BorderBrush" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type MenuItem}">
        <Setter Property="Control.HorizontalContentAlignment">
            <Setter.Value>
                <Binding Path="HorizontalContentAlignment"
                         RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}" />
            </Setter.Value>
        </Setter>
        <Setter Property="Control.VerticalContentAlignment">
            <Setter.Value>
                <Binding Path="VerticalContentAlignment"
                         RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}" />
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Background"
                Value="{DynamicResource MenuBackgroundBrush}" />
        <Setter Property="Control.BorderBrush"
                Value="{DynamicResource MenuBackgroundBrush}" />
        <Setter Property="Control.Foreground"
                Value="{DynamicResource MenuTextBrush}" />
        <Setter Property="Control.FontFamily"
                Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="Control.FontSize"
                Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="Control.FontWeight"
                Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border Name="Bd"
                            SnapsToDevicePixels="true"
                            Background="{TemplateBinding Control.Background}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}"
                            BorderThickness="{TemplateBinding Control.BorderThickness}">
                        <Grid Name="Grid">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="17"
                                                  Width="Auto"
                                                  SharedSizeGroup="MenuItemIconColumnGroup" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto"
                                                  SharedSizeGroup="MenuItemIGTColumnGroup" />
                                <ColumnDefinition Width="14" />
                            </Grid.ColumnDefinitions>
                            <Path Name="GlyphPanel"
                                  Visibility="Hidden"
                                  Fill="{TemplateBinding Control.Foreground}"
                                  Margin="4,0,6,0"
                                  VerticalAlignment="Center"
                                  Data="M 0,2 L 0,4.8 2.5,7.4 7.1,2.8 7.1,0 2.5,4.6 Z"
                                  FlowDirection="LeftToRight" />
                            <ContentPresenter Name="ContentPresenter"
                                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                              Margin="{TemplateBinding Control.Padding}"
                                              Grid.Column="1"
                                              Content="{TemplateBinding HeaderedItemsControl.Header}"
                                              ContentTemplate="{TemplateBinding HeaderedItemsControl.HeaderTemplate}"
                                              RecognizesAccessKey="true"
                                              ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
                                              ContentSource="Header" />
                            <TextBlock Name="InputGestureText"
                                       Margin="5,2,0,2"
                                       Grid.Column="2"
                                       DockPanel.Dock="Right"
                                       Text="{TemplateBinding MenuItem.InputGestureText}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="MenuItem.IsChecked"
                                 Value="true">
                            <Setter TargetName="GlyphPanel"
                                    Property="UIElement.Visibility"
                                    Value="Visible" />
                        </Trigger>
                        <Trigger Property="MenuItem.IsHighlighted"
                                 Value="true">
                            <Setter Value="{DynamicResource ButtonOverBrush}"
                                    Property="Control.Background" />
                            <Setter Value="{DynamicResource BackgroundBrush}"
                                    Property="Control.Foreground" />
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled"
                                 Value="false">
                            <Setter Value="{DynamicResource MenuDisabledTextBrush}"
                                    Property="Control.Foreground" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="MenuItem.Role"
                     Value="TopLevelHeader">
                <Setter Property="FrameworkElement.Margin"
                        Value="0,1,0,1" />
                <Setter Property="Control.Padding"
                        Value="6,3,6,3" />
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type MenuItem}">
                            <Border Name="Bd"
                                    SnapsToDevicePixels="true"
                                    Background="{TemplateBinding Control.Background}"
                                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                                    BorderThickness="{TemplateBinding Control.BorderThickness}">
                                <DockPanel Name="DockPanel">
                                    <Path Name="GlyphPanel"
                                          Visibility="Collapsed"
                                          Fill="{TemplateBinding Control.Foreground}"
                                          Margin="4,0,6,0"
                                          VerticalAlignment="Center"
                                          Data="M 0,2 L 0,4.8 2.5,7.4 7.1,2.8 7.1,0 2.5,4.6 Z"
                                          FlowDirection="LeftToRight" />
                                    <ContentPresenter Name="ContentPresenter"
                                                      SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                                      Margin="{TemplateBinding Control.Padding}"
                                                      Content="{TemplateBinding HeaderedItemsControl.Header}"
                                                      ContentTemplate="{TemplateBinding HeaderedItemsControl.HeaderTemplate}"
                                                      RecognizesAccessKey="true"
                                                      ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
                                                      ContentSource="Header" />
                                    <Popup Name="PART_Popup"
                                           AllowsTransparency="true"
                                           Placement="Bottom"
                                           Focusable="false"
                                           PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                        <Popup.IsOpen>
                                            <Binding Path="IsSubmenuOpen"
                                                     RelativeSource="{RelativeSource TemplatedParent}" />
                                        </Popup.IsOpen>
                                        <Border Style="{StaticResource DropShadowBorderStyle}">
                                            <Border Name="SubMenuBorder"
                                                    Background="{DynamicResource MenuBackgroundBrush}"
                                                    BorderThickness="1,1,1,1"
                                                    BorderBrush="{DynamicResource ControlFocusBorderBrush}">
                                                <ScrollViewer Name="ScrollViewer"
                                                              CanContentScroll="true"
                                                              Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                                    <ItemsPresenter Name="ItemsPresenter"
                                                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                                                    Margin="2,2,2,2"
                                                                    KeyboardNavigation.DirectionalNavigation="Cycle"
                                                                    KeyboardNavigation.TabNavigation="Cycle"
                                                                    Grid.IsSharedSizeScope="true" />
                                                </ScrollViewer>
                                            </Border>
                                        </Border>
                                    </Popup>
                                </DockPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="MenuItem.IsSuspendingPopupAnimation"
                                         Value="true">
                                    <Setter TargetName="PART_Popup"
                                            Property="Popup.PopupAnimation"
                                            Value="None" />
                                </Trigger>
                                <Trigger Property="MenuItem.IsChecked"
                                         Value="true">
                                    <Setter TargetName="GlyphPanel"
                                            Property="UIElement.Visibility"
                                            Value="Visible" />
                                </Trigger>
                                <Trigger Property="MenuItem.IsHighlighted"
                                         Value="true">
                                    <Setter Value="{DynamicResource ButtonOverBrush}"
                                            Property="Control.Background" />
                                    <Setter Value="{DynamicResource BackgroundBrush}"
                                            Property="Control.Foreground" />
                                </Trigger>
                                <Trigger Property="UIElement.IsEnabled"
                                         Value="false">
                                    <Setter Value="{DynamicResource MenuDisabledTextBrush}"
                                            Property="Control.Foreground" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="MenuItem.Role"
                     Value="TopLevelItem">
                <Setter Property="FrameworkElement.Margin"
                        Value="0,1,0,1" />
                <Setter Property="Control.Padding"
                        Value="6,3,6,3" />
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type MenuItem}">
                            <Border Name="Bd"
                                    SnapsToDevicePixels="true"
                                    Background="{TemplateBinding Control.Background}"
                                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                                    BorderThickness="{TemplateBinding Control.BorderThickness}">
                                <DockPanel Name="DockPanel">
                                    <Path Name="GlyphPanel"
                                          Visibility="Collapsed"
                                          Fill="{TemplateBinding Control.Foreground}"
                                          Margin="4,0,6,0"
                                          VerticalAlignment="Center"
                                          Data="M 0,2 L 0,4.8 2.5,7.4 7.1,2.8 7.1,0 2.5,4.6 Z"
                                          FlowDirection="LeftToRight" />
                                    <ContentPresenter Name="ContentPresenter"
                                                      SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                                      Margin="{TemplateBinding Control.Padding}"
                                                      Content="{TemplateBinding HeaderedItemsControl.Header}"
                                                      ContentTemplate="{TemplateBinding HeaderedItemsControl.HeaderTemplate}"
                                                      RecognizesAccessKey="true"
                                                      ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
                                                      ContentSource="Header" />
                                </DockPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="MenuItem.IsChecked"
                                         Value="true">
                                    <Setter TargetName="GlyphPanel"
                                            Property="UIElement.Visibility"
                                            Value="Visible" />
                                </Trigger>
                                <Trigger Property="MenuItem.IsHighlighted"
                                         Value="true">
                                    <Setter Value="{DynamicResource ButtonOverBrush}"
                                            Property="Control.Background" />
                                    <Setter Value="{DynamicResource BackgroundBrush}"
                                            Property="Control.Foreground" />
                                </Trigger>
                                <Trigger Property="UIElement.IsEnabled"
                                         Value="false">
                                    <Setter Value="{DynamicResource MenuDisabledTextBrush}"
                                            Property="Control.Foreground" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="MenuItem.Role"
                     Value="SubmenuHeader">
                <Setter Property="DockPanel.Dock"
                        Value="Top" />
                <Setter Property="Control.Padding"
                        Value="0,2,0,2" />
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type MenuItem}">
                            <Border Name="Bd"
                                    SnapsToDevicePixels="true"
                                    Background="{TemplateBinding Control.Background}"
                                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                                    BorderThickness="{TemplateBinding Control.BorderThickness}">
                                <Grid Name="Grid">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition MinWidth="17"
                                                          Width="Auto"
                                                          SharedSizeGroup="MenuItemIconColumnGroup" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto"
                                                          SharedSizeGroup="MenuItemIGTColumnGroup" />
                                        <ColumnDefinition Width="14" />
                                    </Grid.ColumnDefinitions>
                                    <Path Name="GlyphPanel"
                                          Visibility="Hidden"
                                          Fill="{TemplateBinding Control.Foreground}"
                                          Margin="4,0,6,0"
                                          VerticalAlignment="Center"
                                          Data="M 0,2 L 0,4.8 2.5,7.4 7.1,2.8 7.1,0 2.5,4.6 Z"
                                          FlowDirection="LeftToRight" />
                                    <ContentPresenter Name="ContentPresenter"
                                                      SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                                      Margin="{TemplateBinding Control.Padding}"
                                                      Grid.Column="1"
                                                      Content="{TemplateBinding HeaderedItemsControl.Header}"
                                                      ContentTemplate="{TemplateBinding HeaderedItemsControl.HeaderTemplate}"
                                                      RecognizesAccessKey="true"
                                                      ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
                                                      ContentSource="Header" />
                                    <Path Name="Path"
                                          Fill="{TemplateBinding Control.Foreground}"
                                          Margin="4,0,6,0"
                                          VerticalAlignment="Center"
                                          Grid.Column="3"
                                          DockPanel.Dock="Right"
                                          Data="M 0,0 L 4,3.5 0,7 Z" />
                                    <Popup Name="PART_Popup"
                                           AllowsTransparency="true"
                                           Placement="Right"
                                           Focusable="false"
                                           PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                                           VerticalOffset="-1"
                                           HorizontalOffset="1">
                                        <Popup.IsOpen>
                                            <Binding Path="IsSubmenuOpen"
                                                     RelativeSource="{RelativeSource TemplatedParent}" />
                                        </Popup.IsOpen>
                                        <Border Style="{StaticResource DropShadowBorderStyle}">
                                            <Border Name="SubMenuBorder"
                                                    Background="{DynamicResource MenuBackgroundBrush}"
                                                    BorderThickness="1,1,1,1"
                                                    BorderBrush="{DynamicResource ControlFocusBorderBrush}">
                                                <ScrollViewer Name="ScrollViewer"
                                                              CanContentScroll="true"
                                                              Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                                    <ItemsPresenter Name="ItemsPresenter"
                                                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                                                    Margin="2,2,2,2"
                                                                    KeyboardNavigation.DirectionalNavigation="Cycle"
                                                                    KeyboardNavigation.TabNavigation="Cycle"
                                                                    Grid.IsSharedSizeScope="true" />
                                                </ScrollViewer>
                                            </Border>
                                        </Border>
                                    </Popup>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="MenuItem.IsSuspendingPopupAnimation"
                                         Value="true">
                                    <Setter TargetName="PART_Popup"
                                            Property="Popup.PopupAnimation"
                                            Value="None" />
                                </Trigger>
                                <Trigger Property="MenuItem.IsChecked"
                                         Value="true">
                                    <Setter TargetName="GlyphPanel"
                                            Property="UIElement.Visibility"
                                            Value="Visible" />
                                </Trigger>
                                <Trigger Property="MenuItem.IsHighlighted"
                                         Value="true">
                                    <Setter Value="{DynamicResource ButtonOverBrush}"
                                            Property="Control.Background" />
                                    <Setter Value="{DynamicResource BackgroundBrush}"
                                            Property="Control.Foreground" />
                                </Trigger>
                                <Trigger Property="UIElement.IsEnabled"
                                         Value="false">
                                    <Setter Value="{DynamicResource MenuDisabledTextBrush}"
                                            Property="Control.Foreground" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="MenuItem.Role"
                     Value="SubmenuItem">
                <Setter Property="DockPanel.Dock"
                        Value="Top" />
                <Setter Property="Control.Padding"
                        Value="0,2,0,2" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}"
           TargetType="{x:Type Separator}">
        <Setter Property="FrameworkElement.Height"
                Value="1" />
        <Setter Property="FrameworkElement.Margin"
                Value="3,2,3,2" />
        <Setter Property="UIElement.Focusable"
                Value="true" />
        <Setter Property="UIElement.SnapsToDevicePixels"
                Value="true" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border SnapsToDevicePixels="true"
                            Background="{DynamicResource ControlFocusBorderBrush}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}"
                            BorderThickness="0" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type MenuBase}">
        <Setter Property="UIElement.SnapsToDevicePixels"
                Value="true" />
    </Style>
    <!--#endregion-->

    <!--#region PasswordBox-->
    <Style TargetType="{x:Type PasswordBox}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsEnabled"
                     Value="false">
                <Setter Property="Control.Foreground"
                        Value="{DynamicResource ButtonDefaultBrush}" />
                <Setter Property="Control.Background"
                        Value="{DynamicResource RecessedBrush}" />
            </Trigger>
            <Trigger Property="UIElement.IsFocused"
                     Value="true">
                <Setter Property="Control.Background"
                        Value="{DynamicResource DarkBrush}" />
            </Trigger>
            <Trigger Property="UIElement.IsKeyboardFocused"
                     Value="true">
                <Setter Property="Control.Foreground"
                        Value="{DynamicResource Text1Brush}" />
                <Setter Property="Control.Background"
                        Value="{DynamicResource BackgroundBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Control.BorderBrush"
                Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Control.Foreground"
                Value="{DynamicResource Text1Brush}" />
        <Setter Property="Control.Background"
                Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Control.HorizontalContentAlignment"
                Value="Stretch" />
        <Setter Property="Control.VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Control.Padding"
                Value="2,0,0,0" />
        <Setter Property="FrameworkElement.MinHeight"
                Value="20" />
        <Setter Property="FrameworkElement.FocusVisualStyle">
            <Setter.Value>
                <x:NullExtension />
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border Focusable="false"
                            Background="{TemplateBinding Control.Background}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}"
                            CornerRadius="3">
                        <ScrollViewer Name="PART_ContentHost"
                                      Margin="{TemplateBinding Control.Padding}"
                                      VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                      HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region ProgressBar-->
    <Style TargetType="{x:Type ProgressBar}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Border Name="PART_Track"
                            Background="{DynamicResource ProgressBarBackgroundBrush}"
                            BorderBrush="{DynamicResource ProgressBarBorderBrush}"
                            BorderThickness="1"
                            CornerRadius="0">
                        <Border Name="PART_Indicator"
                                HorizontalAlignment="Left"
                                Background="{DynamicResource ProgressBarProgressIndicatorBrush}"
                                CornerRadius="0" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region RadionButton-->
    <Style x:Key="RadioButtonBase"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Control.Background"
                Value="{DynamicResource CheckMarkToggleButtonBackgroundBrush}" />
        <Setter Property="Control.BorderBrush"
                Value="{DynamicResource CheckMarkToggleButtonDefaultBorderBrush}" />
        <Setter Property="Control.Foreground"
                Value="{DynamicResource Text1Brush}" />
        <Setter Property="Control.FontFamily"
                Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="Control.FontSize"
                Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="Control.FontWeight"
                Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="KeyboardNavigation.AcceptsReturn"
                Value="false" />
        <Setter Property="Control.Padding"
                Value="4,0,0,0" />
        <Setter Property="FrameworkElement.MinHeight"
                Value="20" />
        <Setter Property="Control.VerticalContentAlignment"
                Value="Center" />
        <Setter Property="FrameworkElement.FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Ellipse SnapsToDevicePixels="true"
                                         Stroke="{DynamicResource ControlFocusBorderBrush}"
                                         StrokeThickness="1"
                                         Width="12"
                                         Height="12"
                                         HorizontalAlignment="Left"
                                         Margin="0,0,0,0"
                                         VerticalAlignment="Center" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid Width="12"
                              Height="12"
                              Margin="0,0,0,0"
                              VerticalAlignment="Center">
                            <Ellipse Name="Ellipse_Border"
                                     Fill="{TemplateBinding Control.Background}"
                                     Stroke="{TemplateBinding Control.BorderBrush}"
                                     StrokeThickness="1"
                                     HorizontalAlignment="Stretch"
                                     VerticalAlignment="Stretch" />
                            <Ellipse Name="CheckMark"
                                     Fill="{TemplateBinding Control.Foreground}"
                                     Width="6"
                                     Height="6"
                                     HorizontalAlignment="Center"
                                     VerticalAlignment="Center" />
                        </Grid>
                        <ContentPresenter Grid.Column="1"
                                          HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Control.Padding}"
                                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                          RecognizesAccessKey="true" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked"
                                 Value="false">
                            <Setter TargetName="CheckMark"
                                    Property="UIElement.Visibility"
                                    Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver"
                                 Value="true">
                            <Setter Value="{DynamicResource CheckMarkToggleButtonMouseOverBorderBrush}"
                                    Property="Control.BorderBrush" />
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled"
                                 Value="false">
                            <Setter Value="{DynamicResource CheckMarkToggleButtonDisabledBorderBrush}"
                                    Property="Control.BorderBrush" />
                            <Setter Value="{DynamicResource DialogDisabledTextBrush}"
                                    Property="Control.Foreground" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type RadioButton}"
           BasedOn="{StaticResource RadioButtonBase}" />
    <!--#endregion-->

    <!--#region Slider-->
    <Style x:Key="Slider_RepeatButton"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="Control.IsTabStop"
                Value="false" />
        <Setter Property="UIElement.Focusable"
                Value="false" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Slider_Thumb"
           TargetType="{x:Type Thumb}">
        <Style.Triggers>
            <Trigger Property="Thumb.IsDragging"
                     Value="true">
                <Setter Property="Control.Background"
                        Value="{DynamicResource ButtonOverBrush}" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver"
                     Value="true">
                <Setter Property="Control.Background"
                        Value="{DynamicResource ButtonOverBrush}" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled"
                     Value="false">
                <Setter Property="UIElement.Opacity"
                        Value="0.5" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Control.Background"
                Value="{DynamicResource ButtonSelectionGrad}" />
        <Setter Property="FrameworkElement.Width"
                Value="12" />
        <Setter Property="FrameworkElement.Height"
                Value="12" />
        <Setter Property="UIElement.Focusable"
                Value="false" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Ellipse Stroke="{DynamicResource PaneHighlightBrush}"
                             StrokeThickness="1"
                             Fill="{TemplateBinding Control.Background}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Slider}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsEnabled"
                     Value="false">
                <Setter Property="UIElement.Opacity"
                        Value="0.5" />
            </Trigger>
            <Trigger Property="Slider.Orientation"
                     Value="Vertical">
                <Setter Property="FrameworkElement.MinHeight"
                        Value="11" />
                <Setter Property="FrameworkElement.Height"
                        Value="100" />
                <Setter Property="FrameworkElement.MinWidth"
                        Value="16" />
                <Setter Property="FrameworkElement.Width"
                        Value="16" />
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Slider}">
                            <Grid ClipToBounds="false">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto"
                                                      MinWidth="{TemplateBinding FrameworkElement.MinHeight}" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <TickBar Name="LeftTick"
                                         Grid.Column="0"
                                         Placement="Left"
                                         Fill="{TemplateBinding Control.Foreground}"
                                         Width="4"
                                         Visibility="Collapsed" />
                                <Border Width="4"
                                        Grid.Column="1"
                                        CornerRadius="2"
                                        Background="{TemplateBinding Control.Background}"
                                        BorderBrush="{TemplateBinding Control.BorderBrush}"
                                        BorderThickness="{TemplateBinding Control.BorderThickness}"
                                        Height="{TemplateBinding FrameworkElement.Height}" />
                                <Canvas Grid.Column="1"
                                        HorizontalAlignment="Center"
                                        Width="4">
                                    <Rectangle Name="PART_SelectionRange"
                                               Canvas.Right="1"
                                               Fill="{TemplateBinding Control.Foreground}"
                                               Width="2"
                                               Visibility="Hidden" />
                                </Canvas>
                                <Track Name="PART_Track"
                                       Grid.Column="1">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Style="{StaticResource ExtraLargeSpacing}"
                                                      Command="Slider.DecreaseLarge" />
                                    </Track.DecreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{StaticResource Slider_Thumb}" />
                                    </Track.Thumb>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Style="{StaticResource Slider_RepeatButton}"
                                                      Command="Slider.IncreaseLarge" />
                                    </Track.IncreaseRepeatButton>
                                </Track>
                                <TickBar Name="RightTick"
                                         Grid.Column="2"
                                         Fill="{TemplateBinding Control.Foreground}"
                                         Placement="Right"
                                         Width="4"
                                         Visibility="Collapsed" />
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Slider.TickPlacement"
                                         Value="TopLeft">
                                    <Setter TargetName="LeftTick"
                                            Property="UIElement.Visibility"
                                            Value="Visible" />
                                </Trigger>
                                <Trigger Property="Slider.TickPlacement"
                                         Value="BottomRight">
                                    <Setter TargetName="RightTick"
                                            Property="UIElement.Visibility"
                                            Value="Visible" />
                                </Trigger>
                                <Trigger Property="Slider.TickPlacement"
                                         Value="Both">
                                    <Setter TargetName="LeftTick"
                                            Property="UIElement.Visibility"
                                            Value="Visible" />
                                    <Setter TargetName="RightTick"
                                            Property="UIElement.Visibility"
                                            Value="Visible" />
                                </Trigger>
                                <Trigger Property="Slider.IsSelectionRangeEnabled"
                                         Value="true">
                                    <Setter TargetName="PART_SelectionRange"
                                            Property="UIElement.Visibility"
                                            Value="Visible" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Control.Background"
                Value="{DynamicResource ButtonSelectionGrad}" />
        <Setter Property="Control.BorderThickness"
                Value="1" />
        <Setter Property="Control.BorderBrush"
                Value="{DynamicResource PaneHighlightBrush}" />
        <Setter Property="Control.Foreground"
                Value="{DynamicResource Text1Brush}" />
        <Setter Property="FrameworkElement.MinWidth"
                Value="11" />
        <Setter Property="FrameworkElement.MinHeight"
                Value="16" />
        <Setter Property="UIElement.Focusable"
                Value="false" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <Grid ClipToBounds="false">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto"
                                           MinHeight="{TemplateBinding FrameworkElement.MinHeight}" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <TickBar Name="TopTick"
                                 Grid.Row="0"
                                 Placement="Top"
                                 Fill="{TemplateBinding Control.Foreground}"
                                 Height="4"
                                 Visibility="Collapsed" />
                        <Border Height="4"
                                Grid.Row="1"
                                CornerRadius="2"
                                Background="{TemplateBinding Control.Background}"
                                BorderBrush="{TemplateBinding Control.BorderBrush}"
                                BorderThickness="{TemplateBinding Control.BorderThickness}"
                                Width="{TemplateBinding FrameworkElement.Width}" />
                        <Canvas Grid.Row="1"
                                VerticalAlignment="Center"
                                Height="4">
                            <Rectangle Name="PART_SelectionRange"
                                       Canvas.Top="1"
                                       Fill="{TemplateBinding Control.Foreground}"
                                       Height="2.0"
                                       Visibility="Hidden" />
                        </Canvas>
                        <Track Name="PART_Track"
                               Grid.Row="1">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Style="{StaticResource Slider_RepeatButton}"
                                              Command="Slider.DecreaseLarge" />
                            </Track.DecreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource Slider_Thumb}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Style="{StaticResource Slider_RepeatButton}"
                                              Command="Slider.IncreaseLarge" />
                            </Track.IncreaseRepeatButton>
                        </Track>
                        <TickBar Name="BottomTick"
                                 Grid.Row="2"
                                 Fill="{TemplateBinding Control.Foreground}"
                                 Placement="Bottom"
                                 Height="4"
                                 Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Slider.TickPlacement"
                                 Value="TopLeft">
                            <Setter TargetName="TopTick"
                                    Property="UIElement.Visibility"
                                    Value="Visible" />
                        </Trigger>
                        <Trigger Property="Slider.TickPlacement"
                                 Value="BottomRight">
                            <Setter TargetName="BottomTick"
                                    Property="UIElement.Visibility"
                                    Value="Visible" />
                        </Trigger>
                        <Trigger Property="Slider.TickPlacement"
                                 Value="Both">
                            <Setter TargetName="TopTick"
                                    Property="UIElement.Visibility"
                                    Value="Visible" />
                            <Setter TargetName="BottomTick"
                                    Property="UIElement.Visibility"
                                    Value="Visible" />
                        </Trigger>
                        <Trigger Property="Slider.IsSelectionRangeEnabled"
                                 Value="true">
                            <Setter TargetName="PART_SelectionRange"
                                    Property="UIElement.Visibility"
                                    Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region StatusBar-->
    <Style TargetType="{x:Type StatusBar}">
        <Setter Property="Control.Background"
                Value="{DynamicResource RecessedBrush}" />
        <Setter Property="Control.Foreground"
                Value="{DynamicResource Text1Brush}" />
    </Style>
    <!--#endregion-->

    <!--#region TabControl-->
    <Style x:Key="ExpressionTabItemBase"
           TargetType="{x:Type TabItem}">
        <Style.BasedOn>
            <x:NullExtension />
        </Style.BasedOn>
        <Style.Triggers>
            <Trigger Property="TabItem.IsSelected"
                     Value="true">
                <Setter Property="Panel.ZIndex"
                        Value="100" />
                <Setter Property="Control.Background"
                        Value="{DynamicResource TabSelectionBrush}" />
                <Setter Property="Control.Foreground"
                        Value="{DynamicResource Text1Brush}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="UIElement.IsMouseOver"
                               Value="true" />
                    <Condition Property="TabItem.IsSelected"
                               Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="Control.Background"
                        Value="{DynamicResource ButtonOverBrush}" />
                <Setter Property="Control.Foreground"
                        Value="{DynamicResource WhiteBrush}" />
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled"
                     Value="false">
                <Setter Property="Control.Background"
                        Value="{DynamicResource PaletteBrush}" />
                <Setter Property="Control.Foreground"
                        Value="{DynamicResource DisabledTextBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Control.Background"
                Value="{DynamicResource TabNormalBrush}" />
        <Setter Property="Control.BorderBrush">
            <Setter.Value>
                <x:NullExtension />
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Foreground"
                Value="{DynamicResource WhiteBrush}" />
        <Setter Property="FrameworkElement.MinHeight"
                Value="20" />
        <Setter Property="Control.FontFamily"
                Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="Control.FontSize"
                Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="Control.FontWeight"
                Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="UIElement.SnapsToDevicePixels"
                Value="true" />
        <Setter Property="Control.IsTabStop"
                Value="false" />
        <Setter Property="Control.HorizontalContentAlignment"
                Value="Left" />
    </Style>
    <Style TargetType="{x:Type TabItem}"
           BasedOn="{StaticResource ExpressionTabItemBase}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Border Name="Border"
                            Margin="0,0,2,0"
                            Background="{TemplateBinding Control.Background}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}"
                            BorderThickness="0"
                            CornerRadius="3,3,0,0"
                            Height="{TemplateBinding FrameworkElement.Height}">
                        <ContentPresenter Name="ContentSite"
                                          HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                          Margin="5,0,5,0"
                                          VerticalAlignment="Center"
                                          RecognizesAccessKey="true"
                                          ContentSource="Header" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabItem.TabStripPlacement"
                                 Value="Bottom">
                            <Setter TargetName="Border"
                                    Property="Border.CornerRadius"
                                    Value="0,0,3,3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpressionTabControl"
           TargetType="{x:Type TabControl}">
        <Setter Property="ItemsControl.ItemContainerStyle"
                Value="{StaticResource {x:Type TabItem}}" />
        <Setter Property="UIElement.ClipToBounds"
                Value="true" />
        <Setter Property="Control.BorderBrush">
            <Setter.Value>
                <x:NullExtension />
            </Setter.Value>
        </Setter>
        <Setter Property="Control.BorderThickness"
                Value="0" />
        <Setter Property="Control.Background"
                Value="{DynamicResource ButtonDefaultBrush}" />
        <Setter Property="Control.Padding"
                Value="0" />
        <Setter Property="UIElement.Focusable"
                Value="false" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid Name="Grid1"
                          KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0" />
                            <ColumnDefinition x:Name="ColumnDefinition1"
                                              Width="0px" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0"
                                           Height="Auto" />
                            <RowDefinition x:Name="RowDefinition1"
                                           Height="*" />
                        </Grid.RowDefinitions>
                        <TabPanel Name="HeaderPanel"
                                  Background="Transparent"
                                  KeyboardNavigation.TabIndex="1"
                                  Grid.Column="0"
                                  Grid.Row="0"
                                  IsItemsHost="true" />
                        <Border Name="ContentPanel"
                                BorderThickness="{TemplateBinding Control.BorderThickness}"
                                BorderBrush="{TemplateBinding Control.BorderBrush}"
                                Background="{TemplateBinding Control.Background}"
                                KeyboardNavigation.TabNavigation="Local"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                KeyboardNavigation.TabIndex="2"
                                Grid.Column="0"
                                Grid.Row="1"
                                CornerRadius="0,0,3,3">
                            <ContentPresenter Name="ContentSite"
                                              Margin="{TemplateBinding Control.Padding}"
                                              Content="{TemplateBinding TabControl.SelectedContent}"
                                              ContentTemplate="{TemplateBinding TabControl.SelectedContentTemplate}"
                                              ContentTemplateSelector="{TemplateBinding TabControl.SelectedContentTemplateSelector}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabControl.TabStripPlacement"
                                 Value="Bottom">
                            <Setter TargetName="HeaderPanel"
                                    Property="Grid.Row"
                                    Value="1" />
                            <Setter TargetName="ContentPanel"
                                    Property="Grid.Row"
                                    Value="0" />
                            <Setter TargetName="ContentPanel"
                                    Property="Border.BorderThickness"
                                    Value="0,0,0,1" />
                            <Setter TargetName="RowDefinition0"
                                    Property="RowDefinition.Height"
                                    Value="*" />
                            <Setter TargetName="RowDefinition1"
                                    Property="RowDefinition.Height"
                                    Value="Auto" />
                            <Setter TargetName="HeaderPanel"
                                    Property="FrameworkElement.Margin"
                                    Value="2,0,2,2" />
                        </Trigger>
                        <Trigger Property="TabControl.TabStripPlacement"
                                 Value="Right">
                            <Setter TargetName="HeaderPanel"
                                    Property="Grid.Column"
                                    Value="1" />
                            <Setter TargetName="ContentPanel"
                                    Property="Grid.Row"
                                    Value="0" />
                            <Setter TargetName="ContentPanel"
                                    Property="Border.BorderThickness"
                                    Value="0,0,1,0" />
                            <Setter TargetName="RowDefinition0"
                                    Property="RowDefinition.Height"
                                    Value="*" />
                            <Setter TargetName="RowDefinition1"
                                    Property="RowDefinition.Height"
                                    Value="0" />
                            <Setter TargetName="ColumnDefinition0"
                                    Property="ColumnDefinition.Width"
                                    Value="*" />
                            <Setter TargetName="ColumnDefinition1"
                                    Property="ColumnDefinition.Width"
                                    Value="Auto" />
                            <Setter TargetName="HeaderPanel"
                                    Property="FrameworkElement.Margin"
                                    Value="0,2,2,2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource ExpressionTabControl}"
           TargetType="{x:Type TabControl}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid Name="Grid1"
                          KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="0px" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0"
                                           Height="Auto" />
                            <RowDefinition x:Name="RowDefinition1"
                                           Height="*" />
                        </Grid.RowDefinitions>
                        <UniformGrid Name="HeaderPanel"
                                     Background="Transparent"
                                     KeyboardNavigation.TabIndex="1"
                                     Grid.Column="0"
                                     Grid.Row="0"
                                     IsItemsHost="true"
                                     Rows="1"
                                     Margin="0,0,-2,0" />
                        <Border Name="ContentPanel"
                                BorderThickness="{TemplateBinding Control.BorderThickness}"
                                BorderBrush="{TemplateBinding Control.BorderBrush}"
                                Background="{TemplateBinding Control.Background}"
                                KeyboardNavigation.TabNavigation="Local"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                KeyboardNavigation.TabIndex="2"
                                Grid.Column="0"
                                Grid.Row="1"
                                CornerRadius="0,0,3,3">
                            <ContentPresenter Name="ContentSite"
                                              Margin="{TemplateBinding Control.Padding}"
                                              Content="{TemplateBinding TabControl.SelectedContent}"
                                              ContentTemplate="{TemplateBinding TabControl.SelectedContentTemplate}"
                                              ContentTemplateSelector="{TemplateBinding TabControl.SelectedContentTemplateSelector}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabControl.TabStripPlacement"
                                 Value="Bottom">
                            <Setter TargetName="HeaderPanel"
                                    Property="Grid.Row"
                                    Value="1" />
                            <Setter TargetName="ContentPanel"
                                    Property="Grid.Row"
                                    Value="0" />
                            <Setter TargetName="ContentPanel"
                                    Property="Border.BorderThickness"
                                    Value="0,0,0,1" />
                            <Setter TargetName="RowDefinition0"
                                    Property="RowDefinition.Height"
                                    Value="*" />
                            <Setter TargetName="RowDefinition1"
                                    Property="RowDefinition.Height"
                                    Value="Auto" />
                            <Setter TargetName="HeaderPanel"
                                    Property="FrameworkElement.Margin"
                                    Value="2,0,2,2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region TextBox-->
    <ControlTemplate x:Key="BaseTextBoxTemplate"
                     PresentationOptions:Freeze="false"
                     TargetType="{x:Type TextBox}">
        <Border Focusable="false"
                Background="{TemplateBinding Control.Background}"
                BorderBrush="{TemplateBinding Control.BorderBrush}"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                CornerRadius="{TemplateBinding Border.CornerRadius}">
            <ScrollViewer Name="PART_ContentHost"
                          Margin="{TemplateBinding Control.Padding}"
                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                          HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" />
        </Border>
    </ControlTemplate>
    <Style x:Key="BaseTextBox"
           TargetType="{x:Type TextBox}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsEnabled"
                     Value="false">
                <Setter Property="Control.Foreground"
                        Value="{DynamicResource DisabledTextBrush}" />
                <Setter Property="Control.Background"
                        Value="{DynamicResource RecessedBrush}" />
            </Trigger>
            <Trigger Property="UIElement.IsFocused"
                     Value="true">
                <Setter Property="Control.Background"
                        Value="{DynamicResource DarkBrush}" />
            </Trigger>
            <Trigger Property="UIElement.IsKeyboardFocused"
                     Value="true">
                <Setter Property="Control.Foreground"
                        Value="{DynamicResource Text1Brush}" />
                <Setter Property="Control.Background"
                        Value="{DynamicResource BackgroundBrush}" />
            </Trigger>
            <Trigger Property="TextBoxBase.IsReadOnly"
                     Value="true">
                <Setter Property="Control.Foreground"
                        Value="{DynamicResource DisabledTextBrush}" />
                <Setter Property="Control.Background"
                        Value="{DynamicResource RecessedBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Control.BorderBrush"
                Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Control.Foreground"
                Value="{DynamicResource Text1Brush}" />
        <Setter Property="Control.Background"
                Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Control.FontFamily"
                Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="Control.FontSize"
                Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="Control.FontWeight"
                Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Control.HorizontalContentAlignment"
                Value="Stretch" />
        <Setter Property="Control.VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Control.Padding"
                Value="2,0,2,0" />
        <Setter Property="FrameworkElement.MinHeight"
                Value="20" />
        <Setter Property="FrameworkElement.FocusVisualStyle">
            <Setter.Value>
                <x:NullExtension />
            </Setter.Value>
        </Setter>
        <Setter Property="Border.CornerRadius"
                Value="3" />
        <Setter Property="Control.Template"
                Value="{StaticResource BaseTextBoxTemplate}" />
    </Style>
    <Style TargetType="{x:Type TextBox}"
           BasedOn="{StaticResource BaseTextBox}" />
    <!--#endregion-->

    <!--#region TextBlock-->
    <Style x:Key="ExpressionDialogText"
           TargetType="{x:Type TextBlock}">
        <Setter Property="TextBlock.TextWrapping"
                Value="Wrap" />
        <Setter Property="TextBlock.TextTrimming"
                Value="None" />
        <Setter Property="TextBlock.FontFamily"
                Value="{DynamicResource {x:Static SystemFonts.IconFontFamilyKey}}" />
        <Setter Property="TextBlock.FontSize"
                Value="{DynamicResource {x:Static SystemFonts.IconFontSizeKey}}" />
        <Setter Property="TextBlock.Foreground"
                Value="#FF3b3b3b" />
    </Style>
    <Style x:Key="DialogText"
           TargetType="{x:Type TextBlock}">
        <Setter Property="TextBlock.TextWrapping"
                Value="Wrap" />
        <Setter Property="TextBlock.TextTrimming"
                Value="None" />
        <Setter Property="TextBlock.FontFamily"
                Value="{DynamicResource {x:Static SystemFonts.IconFontFamilyKey}}" />
        <Setter Property="TextBlock.FontSize"
                Value="{DynamicResource {x:Static SystemFonts.IconFontSizeKey}}" />
        <Setter Property="TextBlock.Foreground"
                Value="{DynamicResource Text1Brush}" />
    </Style>
    <!--#endregion-->

    <!--#region ToolTip-->
    <Style x:Key="ToolTipContentBorder"
           x:Uid="Style_212"
           TargetType="{x:Type Border}">
        <Setter x:Uid="Setter_1957"
                Property="Border.BorderBrush"
                Value="{DynamicResource ToolTipBorderBrush}" />
        <Setter x:Uid="Setter_1950"
                Property="Border.CornerRadius"
                Value="3" />
        <Setter x:Uid="Setter_1951"
                Property="Border.BorderThickness"
                Value="1" />
        <Setter x:Uid="Setter_1952"
                Property="Border.Background"
                Value="{DynamicResource ToolTipBackgroundBrush}" />
    </Style>
    <Style x:Uid="Style_139"
           TargetType="{x:Type ToolTip}">
        <Setter x:Uid="Setter_1398"
                Property="Control.Foreground"
                Value="{DynamicResource Text1Brush}" />
        <Setter x:Uid="Setter_1545"
                Property="Control.FontFamily"
                Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter x:Uid="Setter_1953"
                Property="Control.Padding"
                Value="5,1,5,1" />
        <Setter x:Uid="Setter_1399"
                Property="Control.Template">
            <Setter.Value>
                <ControlTemplate x:Uid="ControlTemplate_80"
                                 TargetType="{x:Type ToolTip}">
                    <Border x:Uid="Border_90"
                            Style="{StaticResource DropShadowBorderStyle}">
                        <Border x:Uid="Border_54"
                                Style="{StaticResource ToolTipContentBorder}"
                                Padding="{TemplateBinding Control.Padding}">
                            <ContentPresenter x:Uid="ContentPresenter_45" />
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region TreeView-->
    <SolidColorBrush x:Key="TreeViewBackground"
                     Color="#FF333333" />
    <SolidColorBrush x:Key="TreeViewForeground"
                     Color="#FFF0F0F0" />
    <SolidColorBrush x:Key="TreeViewDisabledForeground"
                     Color="#FF8C8C8C" />
    <SolidColorBrush x:Key="MouseOverListItem"
                     Color="#FFAAAAAA" />
    <SolidColorBrush x:Key="SelectedListItem"
                     Color="#FFAAAAAA" />
    <SolidColorBrush x:Key="SelectedListItemForeground"
                     Color="#FFF0F0F0" />
    <SolidColorBrush x:Key="TreeViewStaticArrow"
                     Color="#FFAAAAAA" />
    <SolidColorBrush x:Key="TreeViewMouseOverArrow"
                     Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="TreeViewDisabledArrow"
                     Color="#FF8C8C8C" />
    <Style TargetType="{x:Type TreeView}">
        <Setter Property="Background"
                Value="{StaticResource TreeViewBackground}" />
        <Setter Property="Padding"
                Value="1" />
        <Setter Property="Foreground"
                Value="{StaticResource TreeViewForeground}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
                Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
                Value="Auto" />
        <Setter Property="ScrollViewer.PanningMode"
                Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="False" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <Border x:Name="Bd"
                            SnapsToDevicePixels="true">
                        <ScrollViewer x:Name="_tv_scrollviewer_"
                                      Background="{TemplateBinding Background}"
                                      CanContentScroll="false"
                                      Focusable="false"
                                      HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                                      Padding="{TemplateBinding Padding}"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{StaticResource TreeViewDisabledForeground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TreeViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="MinHeight"
                Value="21" />
        <Setter Property="HorizontalContentAlignment"
                Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment"
                Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Padding"
                Value="1,2,5,1" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="BorderBrush"
                Value="#222222" />
        <Setter Property="Foreground"
                Value="{StaticResource TreeViewForeground}" />
        <Setter Property="FocusVisualStyle"
                Value="{StaticResource TreeViewItemFocusVisual}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <ControlTemplate.Resources>
                        <Controls:LeftMarginMultiplierConverter x:Key="LengthConverter"
                                                                Length="15" />
                    </ControlTemplate.Resources>
                    <StackPanel>
                        <Border Name="Bd"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="3"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}"
                                Padding="{TemplateBinding Padding}">
                            <Grid Margin="{Binding Converter={StaticResource LengthConverter},
                                         RelativeSource={RelativeSource TemplatedParent}}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="15" />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <ToggleButton x:Name="Expander"
                                              Grid.Column="0"
                                              Style="{DynamicResource TreeViewToggleButtonStyle}"
                                              IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                              ClickMode="Press" />
                                <ContentPresenter x:Name="PART_Header"
                                                  Grid.Column="1"
                                                  ContentSource="Header"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                            </Grid>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded"
                                 Value="false">
                            <Setter TargetName="ItemsHost"
                                    Property="Visibility"
                                    Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasItems"
                                 Value="false">
                            <Setter TargetName="Expander"
                                    Property="Visibility"
                                    Value="Hidden" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader"
                                           Value="false" />
                                <Condition Property="Width"
                                           Value="Auto" />
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader"
                                           Value="false" />
                                <Condition Property="Height"
                                           Value="Auto" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header"
                                    Property="MinHeight"
                                    Value="21" />
                        </MultiTrigger>
                        <Trigger Property="IsSelected"
                                 Value="true">
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{StaticResource SelectedListItem}" />
                            <Setter Property="Foreground"
                                    Value="{StaticResource SelectedListItemForeground}" />
                            <Setter Property="Style"
                                    TargetName="Expander"
                                    Value="{DynamicResource TreeViewSelectedToggleButtonStyle}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver"
                                           SourceName="Bd"
                                           Value="true" />
                                <Condition Property="IsSelected"
                                           Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background"
                                    TargetName="Bd"
                                    Value="{StaticResource MouseOverListItem}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected"
                                           Value="true" />
                                <Condition Property="IsSelectionActive"
                                           Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{StaticResource TreeViewDisabledForeground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TreeViewToggleButtonStyle"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable"
                Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent"
                              SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="8" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Path x:Name="arrow"
                                  Grid.ColumnSpan="2"
                                  HorizontalAlignment="Left"
                                  Fill="{StaticResource TreeViewStaticArrow}"
                                  Stroke="{StaticResource TreeViewStaticArrow}"
                                  StrokeThickness="1"
                                  VerticalAlignment="Top"
                                  Data="M5,-0 L9,5 1,5 z"
                                  Height="4.5"
                                  Stretch="Fill"
                                  Width="8"
                                  RenderTransformOrigin="0.5,0.5"
                                  Margin="2.068,6.27,0,0">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <RotateTransform Angle="135" />
                                        <TranslateTransform X="0.17819090885901012"
                                                            Y="0.43019090885900946" />
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                            <ContentPresenter Grid.Column="1"
                                              HorizontalAlignment="Left"
                                              Margin="4,0,0,0"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="True"
                                              VerticalAlignment="Center" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                 Value="false">
                            <Setter Property="Margin"
                                    TargetName="arrow"
                                    Value="-0.526,4.842,0,0"></Setter>
                            <Setter Property="RenderTransform"
                                    TargetName="arrow">
                                <Setter.Value>
                                    <TransformGroup>
                                        <RotateTransform Angle="90" />
                                        <TranslateTransform X="0.17819090885901012"
                                                            Y="0.43019090885900946" />
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Fill"
                                    TargetName="arrow"
                                    Value="Transparent" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver"
                                           Value="true" />
                                <Condition Property="IsChecked"
                                           Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Fill"
                                    TargetName="arrow"
                                    Value="{StaticResource TreeViewMouseOverArrow}" />
                            <Setter Property="Stroke"
                                    TargetName="arrow"
                                    Value="{StaticResource TreeViewMouseOverArrow}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver"
                                           Value="true" />
                                <Condition Property="IsChecked"
                                           Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Fill"
                                    TargetName="arrow"
                                    Value="Transparent" />
                            <Setter Property="Stroke"
                                    TargetName="arrow"
                                    Value="{StaticResource TreeViewMouseOverArrow}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Stroke"
                                    TargetName="arrow"
                                    Value="{StaticResource TreeViewDisabledArrow}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TreeViewSelectedToggleButtonStyle"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable"
                Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent"
                              SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="8" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Path x:Name="arrow"
                                  Grid.ColumnSpan="2"
                                  HorizontalAlignment="Left"
                                  Fill="{StaticResource TreeViewBackground}"
                                  Stroke="{StaticResource TreeViewBackground}"
                                  StrokeThickness="1"
                                  VerticalAlignment="Top"
                                  Data="M5,-0 L9,5 1,5 z"
                                  Height="4.5"
                                  Stretch="Fill"
                                  Width="8"
                                  RenderTransformOrigin="0.5,0.5"
                                  Margin="2.068,6.27,0,0">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <RotateTransform Angle="135" />
                                        <TranslateTransform X="0.17819090885901012"
                                                            Y="0.43019090885900946" />
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                            <ContentPresenter Grid.Column="1"
                                              HorizontalAlignment="Left"
                                              Margin="4,0,0,0"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="True"
                                              VerticalAlignment="Center" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                 Value="false">
                            <Setter Property="Margin"
                                    TargetName="arrow"
                                    Value="-0.526,4.842,0,0"></Setter>
                            <Setter Property="RenderTransform"
                                    TargetName="arrow">
                                <Setter.Value>
                                    <TransformGroup>
                                        <RotateTransform Angle="90" />
                                        <TranslateTransform X="0.17819090885901012"
                                                            Y="0.43019090885900946" />
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Fill"
                                    TargetName="arrow"
                                    Value="Transparent" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver"
                                           Value="true" />
                                <Condition Property="IsChecked"
                                           Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Fill"
                                    TargetName="arrow"
                                    Value="Transparent" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver"
                                           Value="true" />
                                <Condition Property="IsChecked"
                                           Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Fill"
                                    TargetName="arrow"
                                    Value="{StaticResource TreeViewBackground}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled"
                                 Value="false" />
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

</ResourceDictionary>